{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thami\\\\Documents\\\\21W- Local Software Dev Group Project\\\\medicalRecordsV2\\\\src\\\\Components\\\\MyUpdateButton.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { Button } from 'govuk-react';\nimport jq from 'jquery';\nimport { CurrentContext } from '../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction MyUpdateButton(props, disabled) {\n  _s();\n  const currentContext = useContext(CurrentContext);\n  const [inputFilled, setInputFilled] = useState(false);\n  function handleUpdate() {\n    const url_updateMedicalRecords = 'http://localhost:4000/updateMedicalRecordsPdo.php';\n    if (!currentContext.medicalRecord) {\n      console.error(\"Medical record not found\");\n      return;\n    }\n    jq.ajax({\n      type: 'POST',\n      url: url_updateMedicalRecords,\n      data: {\n        nhsNumber: currentContext.medicalRecord.nhsNumber,\n        doseNumber: props.doseNumber,\n        vaccinationDate: props.vaccinationDate,\n        countryOfVaccination: props.countryOfVaccination,\n        authority: props.authority,\n        site: props.site,\n        totalSeriesOfDoses: props.totalSeriesOfDoses,\n        displayName: props.displayName,\n        snomedCode: props.snomedCode,\n        dateEntered: props.dateEntered,\n        procedureCode: props.procedureCode,\n        booster: props.booster,\n        vaccineId: props.vaccineId\n      },\n      success: function (data, textStatus, xhr) {\n        if (data === 'failed') {\n          console.error('Update failed');\n        } else {\n          const updatedRecord = JSON.parse(data);\n          currentContext.setMedicalRecord(updatedRecord);\n        }\n      }\n    });\n  }\n  function isFormValid() {\n    setInputFilled(doseNumber && vaccinationDate && countryOfVaccination && authority && site && totalSeriesOfDoses && displayName && snomedCode && dateEntered && procedureCode && booster && vaccineId);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      id: \"submitButton\",\n      onClick: () => handleUpdate(props),\n      disabled: isFormValid,\n      children: \"Update\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(MyUpdateButton, \"oCLCYStCWUXvYYJ1bCvqzswap+4=\");\n_c = MyUpdateButton;\nexport default MyUpdateButton;\nvar _c;\n$RefreshReg$(_c, \"MyUpdateButton\");","map":{"version":3,"names":["React","useContext","Button","jq","CurrentContext","jsxDEV","_jsxDEV","Fragment","_Fragment","MyUpdateButton","props","disabled","_s","currentContext","inputFilled","setInputFilled","useState","handleUpdate","url_updateMedicalRecords","medicalRecord","console","error","ajax","type","url","data","nhsNumber","doseNumber","vaccinationDate","countryOfVaccination","authority","site","totalSeriesOfDoses","displayName","snomedCode","dateEntered","procedureCode","booster","vaccineId","success","textStatus","xhr","updatedRecord","JSON","parse","setMedicalRecord","isFormValid","children","id","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/thami/Documents/21W- Local Software Dev Group Project/medicalRecordsV2/src/Components/MyUpdateButton.js"],"sourcesContent":["import React, { useContext } from 'react';\r\nimport { Button } from 'govuk-react';\r\nimport jq from 'jquery';\r\nimport { CurrentContext } from '../App';\r\n\r\n\r\nfunction MyUpdateButton(props, disabled) {\r\n    const currentContext = useContext(CurrentContext);\r\n    const [inputFilled, setInputFilled] = useState(false);\r\n\r\n    function handleUpdate() {\r\n        const url_updateMedicalRecords = 'http://localhost:4000/updateMedicalRecordsPdo.php';\r\n        if (!currentContext.medicalRecord) {\r\n            console.error(\"Medical record not found\");\r\n            return;\r\n        }\r\n\r\n        jq.ajax({\r\n            type: 'POST',\r\n            url: url_updateMedicalRecords,\r\n            data: {\r\n                nhsNumber: currentContext.medicalRecord.nhsNumber,\r\n                doseNumber: props.doseNumber,\r\n                vaccinationDate: props.vaccinationDate,\r\n                countryOfVaccination: props.countryOfVaccination,\r\n                authority: props.authority,\r\n                site: props.site,\r\n                totalSeriesOfDoses: props.totalSeriesOfDoses,\r\n                displayName: props.displayName,\r\n                snomedCode: props.snomedCode,\r\n                dateEntered: props.dateEntered,\r\n                procedureCode: props.procedureCode,\r\n                booster: props.booster,\r\n                vaccineId: props.vaccineId,\r\n            },\r\n            success: function (data, textStatus, xhr) {\r\n                if (data === 'failed') {\r\n                    console.error('Update failed');\r\n                } else {\r\n                    const updatedRecord = JSON.parse(data);\r\n                    currentContext.setMedicalRecord(updatedRecord);\r\n                }\r\n            },\r\n        });\r\n    }\r\n    function isFormValid() {\r\n        setInputFilled(\r\n            doseNumber &&\r\n            vaccinationDate &&\r\n            countryOfVaccination &&\r\n            authority &&\r\n            site &&\r\n            totalSeriesOfDoses &&\r\n            displayName &&\r\n            snomedCode &&\r\n            dateEntered &&\r\n            procedureCode &&\r\n            booster &&\r\n            vaccineId\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button id=\"submitButton\" onClick={() => handleUpdate(props)} disabled={isFormValid}>\r\n                Update\r\n            </Button>\r\n            \r\n        </>\r\n\r\n    );\r\n}\r\nexport default MyUpdateButton;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,MAAM,QAAQ,aAAa;AACpC,OAAOC,EAAE,MAAM,QAAQ;AACvB,SAASC,cAAc,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAGxC,SAASC,cAAcA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EAAAC,EAAA;EACrC,MAAMC,cAAc,GAAGZ,UAAU,CAACG,cAAc,CAAC;EACjD,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGC,QAAQ,CAAC,KAAK,CAAC;EAErD,SAASC,YAAYA,CAAA,EAAG;IACpB,MAAMC,wBAAwB,GAAG,mDAAmD;IACpF,IAAI,CAACL,cAAc,CAACM,aAAa,EAAE;MAC/BC,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAC;MACzC;IACJ;IAEAlB,EAAE,CAACmB,IAAI,CAAC;MACJC,IAAI,EAAE,MAAM;MACZC,GAAG,EAAEN,wBAAwB;MAC7BO,IAAI,EAAE;QACFC,SAAS,EAAEb,cAAc,CAACM,aAAa,CAACO,SAAS;QACjDC,UAAU,EAAEjB,KAAK,CAACiB,UAAU;QAC5BC,eAAe,EAAElB,KAAK,CAACkB,eAAe;QACtCC,oBAAoB,EAAEnB,KAAK,CAACmB,oBAAoB;QAChDC,SAAS,EAAEpB,KAAK,CAACoB,SAAS;QAC1BC,IAAI,EAAErB,KAAK,CAACqB,IAAI;QAChBC,kBAAkB,EAAEtB,KAAK,CAACsB,kBAAkB;QAC5CC,WAAW,EAAEvB,KAAK,CAACuB,WAAW;QAC9BC,UAAU,EAAExB,KAAK,CAACwB,UAAU;QAC5BC,WAAW,EAAEzB,KAAK,CAACyB,WAAW;QAC9BC,aAAa,EAAE1B,KAAK,CAAC0B,aAAa;QAClCC,OAAO,EAAE3B,KAAK,CAAC2B,OAAO;QACtBC,SAAS,EAAE5B,KAAK,CAAC4B;MACrB,CAAC;MACDC,OAAO,EAAE,SAAAA,CAAUd,IAAI,EAAEe,UAAU,EAAEC,GAAG,EAAE;QACtC,IAAIhB,IAAI,KAAK,QAAQ,EAAE;UACnBL,OAAO,CAACC,KAAK,CAAC,eAAe,CAAC;QAClC,CAAC,MAAM;UACH,MAAMqB,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACnB,IAAI,CAAC;UACtCZ,cAAc,CAACgC,gBAAgB,CAACH,aAAa,CAAC;QAClD;MACJ;IACJ,CAAC,CAAC;EACN;EACA,SAASI,WAAWA,CAAA,EAAG;IACnB/B,cAAc,CACVY,UAAU,IACVC,eAAe,IACfC,oBAAoB,IACpBC,SAAS,IACTC,IAAI,IACJC,kBAAkB,IAClBC,WAAW,IACXC,UAAU,IACVC,WAAW,IACXC,aAAa,IACbC,OAAO,IACPC,SAAS,CACZ;EACL;EAEA,oBACIhC,OAAA,CAAAE,SAAA;IAAAuC,QAAA,eACIzC,OAAA,CAACJ,MAAM;MAAC8C,EAAE,EAAC,cAAc;MAACC,OAAO,EAAEA,CAAA,KAAMhC,YAAY,CAACP,KAAK,CAAE;MAACC,QAAQ,EAAEmC,WAAY;MAAAC,QAAA,EAAC;IAErF;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAS,iBAEV;AAGX;AAACzC,EAAA,CAjEQH,cAAc;AAAA6C,EAAA,GAAd7C,cAAc;AAkEvB,eAAeA,cAAc;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}