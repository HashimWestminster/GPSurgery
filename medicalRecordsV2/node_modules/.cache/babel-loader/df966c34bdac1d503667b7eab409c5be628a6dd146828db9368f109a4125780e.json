{"ast":null,"code":"import { closestAttributeValue } from '../../common/closest-attribute-value.mjs';\nimport { extractConfigByNamespace, mergeConfigs } from '../../common/index.mjs';\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs';\nimport { I18n } from '../../i18n.mjs';\nimport '../../vendor/polyfills/Date/now.mjs';\nimport '../../vendor/polyfills/Element/prototype/classList.mjs';\nimport '../../vendor/polyfills/Event.mjs';\nimport '../../vendor/polyfills/Function/prototype/bind.mjs';\n\n/* eslint-disable es-x/no-date-now -- Polyfill imported */\n\n/**\n * @constant\n * @type {CharacterCountTranslations}\n * @see Default value for {@link CharacterCountConfig.i18n}\n * @default\n */\nvar CHARACTER_COUNT_TRANSLATIONS = {\n  // Characters\n  charactersUnderLimit: {\n    one: 'You have %{count} character remaining',\n    other: 'You have %{count} characters remaining'\n  },\n  charactersAtLimit: 'You have 0 characters remaining',\n  charactersOverLimit: {\n    one: 'You have %{count} character too many',\n    other: 'You have %{count} characters too many'\n  },\n  // Words\n  wordsUnderLimit: {\n    one: 'You have %{count} word remaining',\n    other: 'You have %{count} words remaining'\n  },\n  wordsAtLimit: 'You have 0 words remaining',\n  wordsOverLimit: {\n    one: 'You have %{count} word too many',\n    other: 'You have %{count} words too many'\n  },\n  textareaDescription: {\n    other: ''\n  }\n};\n\n/**\n * JavaScript enhancements for the CharacterCount component\n *\n * Tracks the number of characters or words in the `.govuk-js-character-count`\n * `<textarea>` inside the element. Displays a message with the remaining number\n * of characters/words available, or the number of characters/words in excess.\n *\n * You can configure the message to only appear after a certain percentage\n * of the available characters/words has been entered.\n *\n * @class\n * @param {Element} $module - HTML element to use for character count\n * @param {CharacterCountConfig} [config] - Character count config\n */\nfunction CharacterCount($module, config) {\n  if (!($module instanceof HTMLElement)) {\n    return this;\n  }\n  var $textarea = $module.querySelector('.govuk-js-character-count');\n  if (!($textarea instanceof HTMLTextAreaElement || $textarea instanceof HTMLInputElement)) {\n    return this;\n  }\n  var defaultConfig = {\n    threshold: 0,\n    i18n: CHARACTER_COUNT_TRANSLATIONS\n  };\n\n  // Read config set using dataset ('data-' values)\n  var datasetConfig = normaliseDataset($module.dataset);\n\n  // To ensure data-attributes take complete precedence, even if they change the\n  // type of count, we need to reset the `maxlength` and `maxwords` from the\n  // JavaScript config.\n  //\n  // We can't mutate `config`, though, as it may be shared across multiple\n  // components inside `initAll`.\n  var configOverrides = {};\n  if ('maxwords' in datasetConfig || 'maxlength' in datasetConfig) {\n    configOverrides = {\n      maxlength: false,\n      maxwords: false\n    };\n  }\n\n  /**\n   * @deprecated Will be made private in v5.0\n   * @type {CharacterCountConfig}\n   */\n  this.config = mergeConfigs(defaultConfig, config || {}, configOverrides, datasetConfig);\n\n  /** @deprecated Will be made private in v5.0 */\n  this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'), {\n    // Read the fallback if necessary rather than have it set in the defaults\n    locale: closestAttributeValue($module, 'lang')\n  });\n\n  /** @deprecated Will be made private in v5.0 */\n  this.maxLength = Infinity;\n  // Determine the limit attribute (characters or words)\n  if ('maxwords' in this.config && this.config.maxwords) {\n    this.maxLength = this.config.maxwords;\n  } else if ('maxlength' in this.config && this.config.maxlength) {\n    this.maxLength = this.config.maxlength;\n  } else {\n    return;\n  }\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$module = $module;\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$textarea = $textarea;\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$visibleCountMessage = null;\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$screenReaderCountMessage = null;\n\n  /** @deprecated Will be made private in v5.0 */\n  this.lastInputTimestamp = null;\n\n  /** @deprecated Will be made private in v5.0 */\n  this.lastInputValue = '';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.valueChecker = null;\n}\n\n/**\n * Initialise component\n */\nCharacterCount.prototype.init = function () {\n  // Check that required elements are present\n  if (!this.$module || !this.$textarea) {\n    return;\n  }\n  var $textarea = this.$textarea;\n  var $textareaDescription = document.getElementById($textarea.id + '-info');\n  if (!$textareaDescription) {\n    return;\n  }\n\n  // Inject a description for the textarea if none is present already\n  // for when the component was rendered with no maxlength, maxwords\n  // nor custom textareaDescriptionText\n  if ($textareaDescription.innerText.match(/^\\s*$/)) {\n    $textareaDescription.innerText = this.i18n.t('textareaDescription', {\n      count: this.maxLength\n    });\n  }\n\n  // Move the textarea description to be immediately after the textarea\n  // Kept for backwards compatibility\n  $textarea.insertAdjacentElement('afterend', $textareaDescription);\n\n  // Create the *screen reader* specific live-updating counter\n  // This doesn't need any styling classes, as it is never visible\n  var $screenReaderCountMessage = document.createElement('div');\n  $screenReaderCountMessage.className = 'govuk-character-count__sr-status govuk-visually-hidden';\n  $screenReaderCountMessage.setAttribute('aria-live', 'polite');\n  this.$screenReaderCountMessage = $screenReaderCountMessage;\n  $textareaDescription.insertAdjacentElement('afterend', $screenReaderCountMessage);\n\n  // Create our live-updating counter element, copying the classes from the\n  // textarea description for backwards compatibility as these may have been\n  // configured\n  var $visibleCountMessage = document.createElement('div');\n  $visibleCountMessage.className = $textareaDescription.className;\n  $visibleCountMessage.classList.add('govuk-character-count__status');\n  $visibleCountMessage.setAttribute('aria-hidden', 'true');\n  this.$visibleCountMessage = $visibleCountMessage;\n  $textareaDescription.insertAdjacentElement('afterend', $visibleCountMessage);\n\n  // Hide the textarea description\n  $textareaDescription.classList.add('govuk-visually-hidden');\n\n  // Remove hard limit if set\n  $textarea.removeAttribute('maxlength');\n  this.bindChangeEvents();\n\n  // When the page is restored after navigating 'back' in some browsers the\n  // state of the character count is not restored until *after* the\n  // DOMContentLoaded event is fired, so we need to manually update it after the\n  // pageshow event in browsers that support it.\n  window.addEventListener('onpageshow' in window ? 'pageshow' : 'DOMContentLoaded', this.updateCountMessage.bind(this));\n  this.updateCountMessage();\n};\n\n/**\n * Bind change events\n *\n * Set up event listeners on the $textarea so that the count messages update\n * when the user types.\n *\n * @deprecated Will be made private in v5.0\n */\nCharacterCount.prototype.bindChangeEvents = function () {\n  var $textarea = this.$textarea;\n  $textarea.addEventListener('keyup', this.handleKeyUp.bind(this));\n\n  // Bind focus/blur events to start/stop polling\n  $textarea.addEventListener('focus', this.handleFocus.bind(this));\n  $textarea.addEventListener('blur', this.handleBlur.bind(this));\n};\n\n/**\n * Handle key up event\n *\n * Update the visible character counter and keep track of when the last update\n * happened for each keypress\n *\n * @deprecated Will be made private in v5.0\n */\nCharacterCount.prototype.handleKeyUp = function () {\n  this.updateVisibleCountMessage();\n  this.lastInputTimestamp = Date.now();\n};\n\n/**\n * Handle focus event\n *\n * Speech recognition software such as Dragon NaturallySpeaking will modify the\n * fields by directly changing its `value`. These changes don't trigger events\n * in JavaScript, so we need to poll to handle when and if they occur.\n *\n * Once the keyup event hasn't been detected for at least 1000 ms (1s), check if\n * the textarea value has changed and update the count message if it has.\n *\n * This is so that the update triggered by the manual comparison doesn't\n * conflict with debounced KeyboardEvent updates.\n *\n * @deprecated Will be made private in v5.0\n */\nCharacterCount.prototype.handleFocus = function () {\n  this.valueChecker = setInterval(function () {\n    if (!this.lastInputTimestamp || Date.now() - 500 >= this.lastInputTimestamp) {\n      this.updateIfValueChanged();\n    }\n  }.bind(this), 1000);\n};\n\n/**\n * Handle blur event\n *\n * Stop checking the textarea value once the textarea no longer has focus\n *\n * @deprecated Will be made private in v5.0\n */\nCharacterCount.prototype.handleBlur = function () {\n  // Cancel value checking on blur\n  clearInterval(this.valueChecker);\n};\n\n/**\n * Update count message if textarea value has changed\n *\n * @deprecated Will be made private in v5.0\n */\nCharacterCount.prototype.updateIfValueChanged = function () {\n  if (this.$textarea.value !== this.lastInputValue) {\n    this.lastInputValue = this.$textarea.value;\n    this.updateCountMessage();\n  }\n};\n\n/**\n * Update count message\n *\n * Helper function to update both the visible and screen reader-specific\n * counters simultaneously (e.g. on init)\n *\n * @deprecated Will be made private in v5.0\n */\nCharacterCount.prototype.updateCountMessage = function () {\n  this.updateVisibleCountMessage();\n  this.updateScreenReaderCountMessage();\n};\n\n/**\n * Update visible count message\n *\n * @deprecated Will be made private in v5.0\n */\nCharacterCount.prototype.updateVisibleCountMessage = function () {\n  var $textarea = this.$textarea;\n  var $visibleCountMessage = this.$visibleCountMessage;\n  var remainingNumber = this.maxLength - this.count($textarea.value);\n\n  // If input is over the threshold, remove the disabled class which renders the\n  // counter invisible.\n  if (this.isOverThreshold()) {\n    $visibleCountMessage.classList.remove('govuk-character-count__message--disabled');\n  } else {\n    $visibleCountMessage.classList.add('govuk-character-count__message--disabled');\n  }\n\n  // Update styles\n  if (remainingNumber < 0) {\n    $textarea.classList.add('govuk-textarea--error');\n    $visibleCountMessage.classList.remove('govuk-hint');\n    $visibleCountMessage.classList.add('govuk-error-message');\n  } else {\n    $textarea.classList.remove('govuk-textarea--error');\n    $visibleCountMessage.classList.remove('govuk-error-message');\n    $visibleCountMessage.classList.add('govuk-hint');\n  }\n\n  // Update message\n  $visibleCountMessage.innerText = this.getCountMessage();\n};\n\n/**\n * Update screen reader count message\n *\n * @deprecated Will be made private in v5.0\n */\nCharacterCount.prototype.updateScreenReaderCountMessage = function () {\n  var $screenReaderCountMessage = this.$screenReaderCountMessage;\n\n  // If over the threshold, remove the aria-hidden attribute, allowing screen\n  // readers to announce the content of the element.\n  if (this.isOverThreshold()) {\n    $screenReaderCountMessage.removeAttribute('aria-hidden');\n  } else {\n    $screenReaderCountMessage.setAttribute('aria-hidden', 'true');\n  }\n\n  // Update message\n  $screenReaderCountMessage.innerText = this.getCountMessage();\n};\n\n/**\n * Count the number of characters (or words, if `config.maxwords` is set)\n * in the given text\n *\n * @deprecated Will be made private in v5.0\n * @param {string} text - The text to count the characters of\n * @returns {number} the number of characters (or words) in the text\n */\nCharacterCount.prototype.count = function (text) {\n  if ('maxwords' in this.config && this.config.maxwords) {\n    var tokens = text.match(/\\S+/g) || []; // Matches consecutive non-whitespace chars\n    return tokens.length;\n  } else {\n    return text.length;\n  }\n};\n\n/**\n * Get count message\n *\n * @deprecated Will be made private in v5.0\n * @returns {string} Status message\n */\nCharacterCount.prototype.getCountMessage = function () {\n  var remainingNumber = this.maxLength - this.count(this.$textarea.value);\n  var countType = 'maxwords' in this.config && this.config.maxwords ? 'words' : 'characters';\n  return this.formatCountMessage(remainingNumber, countType);\n};\n\n/**\n * Formats the message shown to users according to what's counted\n * and how many remain\n *\n * @deprecated Will be made private in v5.0\n * @param {number} remainingNumber - The number of words/characaters remaining\n * @param {string} countType - \"words\" or \"characters\"\n * @returns {string} Status message\n */\nCharacterCount.prototype.formatCountMessage = function (remainingNumber, countType) {\n  if (remainingNumber === 0) {\n    return this.i18n.t(countType + 'AtLimit');\n  }\n  var translationKeySuffix = remainingNumber < 0 ? 'OverLimit' : 'UnderLimit';\n  return this.i18n.t(countType + translationKeySuffix, {\n    count: Math.abs(remainingNumber)\n  });\n};\n\n/**\n * Check if count is over threshold\n *\n * Checks whether the value is over the configured threshold for the input.\n * If there is no configured threshold, it is set to 0 and this function will\n * always return true.\n *\n * @deprecated Will be made private in v5.0\n * @returns {boolean} true if the current count is over the config.threshold\n *   (or no threshold is set)\n */\nCharacterCount.prototype.isOverThreshold = function () {\n  // No threshold means we're always above threshold so save some computation\n  if (!this.config.threshold) {\n    return true;\n  }\n  var $textarea = this.$textarea;\n\n  // Determine the remaining number of characters/words\n  var currentLength = this.count($textarea.value);\n  var maxLength = this.maxLength;\n  var thresholdValue = maxLength * this.config.threshold / 100;\n  return thresholdValue <= currentLength;\n};\n\n/**\n * Character count config\n *\n * @typedef {CharacterCountConfigWithMaxLength | CharacterCountConfigWithMaxWords} CharacterCountConfig\n */\n\n/**\n * Character count config (with maximum number of characters)\n *\n * @typedef {object} CharacterCountConfigWithMaxLength\n * @property {number} [maxlength] - The maximum number of characters.\n *   If maxwords is provided, the maxlength option will be ignored.\n * @property {number} [threshold = 0] - The percentage value of the limit at\n *   which point the count message is displayed. If this attribute is set, the\n *   count message will be hidden by default.\n * @property {CharacterCountTranslations} [i18n = CHARACTER_COUNT_TRANSLATIONS] - See constant {@link CHARACTER_COUNT_TRANSLATIONS}\n */\n\n/**\n * Character count config (with maximum number of words)\n *\n * @typedef {object} CharacterCountConfigWithMaxWords\n * @property {number} [maxwords] - The maximum number of words. If maxwords is\n *   provided, the maxlength option will be ignored.\n * @property {number} [threshold = 0] - The percentage value of the limit at\n *   which point the count message is displayed. If this attribute is set, the\n *   count message will be hidden by default.\n * @property {CharacterCountTranslations} [i18n = CHARACTER_COUNT_TRANSLATIONS] - See constant {@link CHARACTER_COUNT_TRANSLATIONS}\n */\n\n/**\n * Character count translations\n *\n * @typedef {object} CharacterCountTranslations\n *\n * Messages shown to users as they type. It provides feedback on how many words\n * or characters they have remaining or if they are over the limit. This also\n * includes a message used as an accessible description for the textarea.\n * @property {TranslationPluralForms} [charactersUnderLimit] - Message displayed\n *   when the number of characters is under the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [charactersAtLimit] - Message displayed when the number of\n *   characters reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [charactersOverLimit] - Message displayed\n *   when the number of characters is over the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [wordsUnderLimit] - Message displayed when\n *   the number of words is under the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [wordsAtLimit] - Message displayed when the number of\n *   words reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [wordsOverLimit] - Message displayed when\n *   the number of words is over the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [textareaDescription] - Message made\n *   available to assistive technologies, if none is already present in the\n *   HTML, to describe that the component accepts only a limited amount of\n *   content. It is visible on the page when JavaScript is unavailable. The\n *   component will replace the `%{count}` placeholder with the value of the\n *   `maxlength` or `maxwords` parameter.\n */\n\n/**\n * @typedef {import('../../i18n.mjs').TranslationPluralForms} TranslationPluralForms\n */\n\nexport default CharacterCount;","map":{"version":3,"names":["closestAttributeValue","extractConfigByNamespace","mergeConfigs","normaliseDataset","I18n","CHARACTER_COUNT_TRANSLATIONS","charactersUnderLimit","one","other","charactersAtLimit","charactersOverLimit","wordsUnderLimit","wordsAtLimit","wordsOverLimit","textareaDescription","CharacterCount","$module","config","HTMLElement","$textarea","querySelector","HTMLTextAreaElement","HTMLInputElement","defaultConfig","threshold","i18n","datasetConfig","dataset","configOverrides","maxlength","maxwords","locale","maxLength","Infinity","$visibleCountMessage","$screenReaderCountMessage","lastInputTimestamp","lastInputValue","valueChecker","prototype","init","$textareaDescription","document","getElementById","id","innerText","match","t","count","insertAdjacentElement","createElement","className","setAttribute","classList","add","removeAttribute","bindChangeEvents","window","addEventListener","updateCountMessage","bind","handleKeyUp","handleFocus","handleBlur","updateVisibleCountMessage","Date","now","setInterval","updateIfValueChanged","clearInterval","value","updateScreenReaderCountMessage","remainingNumber","isOverThreshold","remove","getCountMessage","text","tokens","length","countType","formatCountMessage","translationKeySuffix","Math","abs","currentLength","thresholdValue"],"sources":["C:/Users/thami/Documents/21W- Local Software Dev Group Project/medicalRecordsV2/node_modules/govuk-frontend/govuk-esm/components/character-count/character-count.mjs"],"sourcesContent":["import { closestAttributeValue } from '../../common/closest-attribute-value.mjs';\nimport { extractConfigByNamespace, mergeConfigs } from '../../common/index.mjs';\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs';\nimport { I18n } from '../../i18n.mjs';\nimport '../../vendor/polyfills/Date/now.mjs';\nimport '../../vendor/polyfills/Element/prototype/classList.mjs';\nimport '../../vendor/polyfills/Event.mjs';\nimport '../../vendor/polyfills/Function/prototype/bind.mjs';\n\n/* eslint-disable es-x/no-date-now -- Polyfill imported */\n\n/**\n * @constant\n * @type {CharacterCountTranslations}\n * @see Default value for {@link CharacterCountConfig.i18n}\n * @default\n */\nvar CHARACTER_COUNT_TRANSLATIONS = {\n  // Characters\n  charactersUnderLimit: {\n    one: 'You have %{count} character remaining',\n    other: 'You have %{count} characters remaining'\n  },\n  charactersAtLimit: 'You have 0 characters remaining',\n  charactersOverLimit: {\n    one: 'You have %{count} character too many',\n    other: 'You have %{count} characters too many'\n  },\n  // Words\n  wordsUnderLimit: {\n    one: 'You have %{count} word remaining',\n    other: 'You have %{count} words remaining'\n  },\n  wordsAtLimit: 'You have 0 words remaining',\n  wordsOverLimit: {\n    one: 'You have %{count} word too many',\n    other: 'You have %{count} words too many'\n  },\n  textareaDescription: {\n    other: ''\n  }\n};\n\n/**\n * JavaScript enhancements for the CharacterCount component\n *\n * Tracks the number of characters or words in the `.govuk-js-character-count`\n * `<textarea>` inside the element. Displays a message with the remaining number\n * of characters/words available, or the number of characters/words in excess.\n *\n * You can configure the message to only appear after a certain percentage\n * of the available characters/words has been entered.\n *\n * @class\n * @param {Element} $module - HTML element to use for character count\n * @param {CharacterCountConfig} [config] - Character count config\n */\nfunction CharacterCount ($module, config) {\n  if (!($module instanceof HTMLElement)) {\n    return this\n  }\n\n  var $textarea = $module.querySelector('.govuk-js-character-count');\n  if (\n    !(\n      $textarea instanceof HTMLTextAreaElement ||\n      $textarea instanceof HTMLInputElement\n    )\n  ) {\n    return this\n  }\n\n  var defaultConfig = {\n    threshold: 0,\n    i18n: CHARACTER_COUNT_TRANSLATIONS\n  };\n\n  // Read config set using dataset ('data-' values)\n  var datasetConfig = normaliseDataset($module.dataset);\n\n  // To ensure data-attributes take complete precedence, even if they change the\n  // type of count, we need to reset the `maxlength` and `maxwords` from the\n  // JavaScript config.\n  //\n  // We can't mutate `config`, though, as it may be shared across multiple\n  // components inside `initAll`.\n  var configOverrides = {};\n  if ('maxwords' in datasetConfig || 'maxlength' in datasetConfig) {\n    configOverrides = {\n      maxlength: false,\n      maxwords: false\n    };\n  }\n\n  /**\n   * @deprecated Will be made private in v5.0\n   * @type {CharacterCountConfig}\n   */\n  this.config = mergeConfigs(\n    defaultConfig,\n    config || {},\n    configOverrides,\n    datasetConfig\n  );\n\n  /** @deprecated Will be made private in v5.0 */\n  this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'), {\n    // Read the fallback if necessary rather than have it set in the defaults\n    locale: closestAttributeValue($module, 'lang')\n  });\n\n  /** @deprecated Will be made private in v5.0 */\n  this.maxLength = Infinity;\n  // Determine the limit attribute (characters or words)\n  if ('maxwords' in this.config && this.config.maxwords) {\n    this.maxLength = this.config.maxwords;\n  } else if ('maxlength' in this.config && this.config.maxlength) {\n    this.maxLength = this.config.maxlength;\n  } else {\n    return\n  }\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$module = $module;\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$textarea = $textarea;\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$visibleCountMessage = null;\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$screenReaderCountMessage = null;\n\n  /** @deprecated Will be made private in v5.0 */\n  this.lastInputTimestamp = null;\n\n  /** @deprecated Will be made private in v5.0 */\n  this.lastInputValue = '';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.valueChecker = null;\n}\n\n/**\n * Initialise component\n */\nCharacterCount.prototype.init = function () {\n  // Check that required elements are present\n  if (!this.$module || !this.$textarea) {\n    return\n  }\n\n  var $textarea = this.$textarea;\n  var $textareaDescription = document.getElementById($textarea.id + '-info');\n  if (!$textareaDescription) {\n    return\n  }\n\n  // Inject a description for the textarea if none is present already\n  // for when the component was rendered with no maxlength, maxwords\n  // nor custom textareaDescriptionText\n  if ($textareaDescription.innerText.match(/^\\s*$/)) {\n    $textareaDescription.innerText = this.i18n.t('textareaDescription', { count: this.maxLength });\n  }\n\n  // Move the textarea description to be immediately after the textarea\n  // Kept for backwards compatibility\n  $textarea.insertAdjacentElement('afterend', $textareaDescription);\n\n  // Create the *screen reader* specific live-updating counter\n  // This doesn't need any styling classes, as it is never visible\n  var $screenReaderCountMessage = document.createElement('div');\n  $screenReaderCountMessage.className = 'govuk-character-count__sr-status govuk-visually-hidden';\n  $screenReaderCountMessage.setAttribute('aria-live', 'polite');\n  this.$screenReaderCountMessage = $screenReaderCountMessage;\n  $textareaDescription.insertAdjacentElement('afterend', $screenReaderCountMessage);\n\n  // Create our live-updating counter element, copying the classes from the\n  // textarea description for backwards compatibility as these may have been\n  // configured\n  var $visibleCountMessage = document.createElement('div');\n  $visibleCountMessage.className = $textareaDescription.className;\n  $visibleCountMessage.classList.add('govuk-character-count__status');\n  $visibleCountMessage.setAttribute('aria-hidden', 'true');\n  this.$visibleCountMessage = $visibleCountMessage;\n  $textareaDescription.insertAdjacentElement('afterend', $visibleCountMessage);\n\n  // Hide the textarea description\n  $textareaDescription.classList.add('govuk-visually-hidden');\n\n  // Remove hard limit if set\n  $textarea.removeAttribute('maxlength');\n\n  this.bindChangeEvents();\n\n  // When the page is restored after navigating 'back' in some browsers the\n  // state of the character count is not restored until *after* the\n  // DOMContentLoaded event is fired, so we need to manually update it after the\n  // pageshow event in browsers that support it.\n  window.addEventListener(\n    'onpageshow' in window ? 'pageshow' : 'DOMContentLoaded',\n    this.updateCountMessage.bind(this)\n  );\n\n  this.updateCountMessage();\n};\n\n/**\n * Bind change events\n *\n * Set up event listeners on the $textarea so that the count messages update\n * when the user types.\n *\n * @deprecated Will be made private in v5.0\n */\nCharacterCount.prototype.bindChangeEvents = function () {\n  var $textarea = this.$textarea;\n  $textarea.addEventListener('keyup', this.handleKeyUp.bind(this));\n\n  // Bind focus/blur events to start/stop polling\n  $textarea.addEventListener('focus', this.handleFocus.bind(this));\n  $textarea.addEventListener('blur', this.handleBlur.bind(this));\n};\n\n/**\n * Handle key up event\n *\n * Update the visible character counter and keep track of when the last update\n * happened for each keypress\n *\n * @deprecated Will be made private in v5.0\n */\nCharacterCount.prototype.handleKeyUp = function () {\n  this.updateVisibleCountMessage();\n  this.lastInputTimestamp = Date.now();\n};\n\n/**\n * Handle focus event\n *\n * Speech recognition software such as Dragon NaturallySpeaking will modify the\n * fields by directly changing its `value`. These changes don't trigger events\n * in JavaScript, so we need to poll to handle when and if they occur.\n *\n * Once the keyup event hasn't been detected for at least 1000 ms (1s), check if\n * the textarea value has changed and update the count message if it has.\n *\n * This is so that the update triggered by the manual comparison doesn't\n * conflict with debounced KeyboardEvent updates.\n *\n * @deprecated Will be made private in v5.0\n */\nCharacterCount.prototype.handleFocus = function () {\n  this.valueChecker = setInterval(function () {\n    if (!this.lastInputTimestamp || (Date.now() - 500) >= this.lastInputTimestamp) {\n      this.updateIfValueChanged();\n    }\n  }.bind(this), 1000);\n};\n\n/**\n * Handle blur event\n *\n * Stop checking the textarea value once the textarea no longer has focus\n *\n * @deprecated Will be made private in v5.0\n */\nCharacterCount.prototype.handleBlur = function () {\n  // Cancel value checking on blur\n  clearInterval(this.valueChecker);\n};\n\n/**\n * Update count message if textarea value has changed\n *\n * @deprecated Will be made private in v5.0\n */\nCharacterCount.prototype.updateIfValueChanged = function () {\n  if (this.$textarea.value !== this.lastInputValue) {\n    this.lastInputValue = this.$textarea.value;\n    this.updateCountMessage();\n  }\n};\n\n/**\n * Update count message\n *\n * Helper function to update both the visible and screen reader-specific\n * counters simultaneously (e.g. on init)\n *\n * @deprecated Will be made private in v5.0\n */\nCharacterCount.prototype.updateCountMessage = function () {\n  this.updateVisibleCountMessage();\n  this.updateScreenReaderCountMessage();\n};\n\n/**\n * Update visible count message\n *\n * @deprecated Will be made private in v5.0\n */\nCharacterCount.prototype.updateVisibleCountMessage = function () {\n  var $textarea = this.$textarea;\n  var $visibleCountMessage = this.$visibleCountMessage;\n  var remainingNumber = this.maxLength - this.count($textarea.value);\n\n  // If input is over the threshold, remove the disabled class which renders the\n  // counter invisible.\n  if (this.isOverThreshold()) {\n    $visibleCountMessage.classList.remove('govuk-character-count__message--disabled');\n  } else {\n    $visibleCountMessage.classList.add('govuk-character-count__message--disabled');\n  }\n\n  // Update styles\n  if (remainingNumber < 0) {\n    $textarea.classList.add('govuk-textarea--error');\n    $visibleCountMessage.classList.remove('govuk-hint');\n    $visibleCountMessage.classList.add('govuk-error-message');\n  } else {\n    $textarea.classList.remove('govuk-textarea--error');\n    $visibleCountMessage.classList.remove('govuk-error-message');\n    $visibleCountMessage.classList.add('govuk-hint');\n  }\n\n  // Update message\n  $visibleCountMessage.innerText = this.getCountMessage();\n};\n\n/**\n * Update screen reader count message\n *\n * @deprecated Will be made private in v5.0\n */\nCharacterCount.prototype.updateScreenReaderCountMessage = function () {\n  var $screenReaderCountMessage = this.$screenReaderCountMessage;\n\n  // If over the threshold, remove the aria-hidden attribute, allowing screen\n  // readers to announce the content of the element.\n  if (this.isOverThreshold()) {\n    $screenReaderCountMessage.removeAttribute('aria-hidden');\n  } else {\n    $screenReaderCountMessage.setAttribute('aria-hidden', 'true');\n  }\n\n  // Update message\n  $screenReaderCountMessage.innerText = this.getCountMessage();\n};\n\n/**\n * Count the number of characters (or words, if `config.maxwords` is set)\n * in the given text\n *\n * @deprecated Will be made private in v5.0\n * @param {string} text - The text to count the characters of\n * @returns {number} the number of characters (or words) in the text\n */\nCharacterCount.prototype.count = function (text) {\n  if ('maxwords' in this.config && this.config.maxwords) {\n    var tokens = text.match(/\\S+/g) || []; // Matches consecutive non-whitespace chars\n    return tokens.length\n  } else {\n    return text.length\n  }\n};\n\n/**\n * Get count message\n *\n * @deprecated Will be made private in v5.0\n * @returns {string} Status message\n */\nCharacterCount.prototype.getCountMessage = function () {\n  var remainingNumber = this.maxLength - this.count(this.$textarea.value);\n\n  var countType = 'maxwords' in this.config && this.config.maxwords ? 'words' : 'characters';\n  return this.formatCountMessage(remainingNumber, countType)\n};\n\n/**\n * Formats the message shown to users according to what's counted\n * and how many remain\n *\n * @deprecated Will be made private in v5.0\n * @param {number} remainingNumber - The number of words/characaters remaining\n * @param {string} countType - \"words\" or \"characters\"\n * @returns {string} Status message\n */\nCharacterCount.prototype.formatCountMessage = function (remainingNumber, countType) {\n  if (remainingNumber === 0) {\n    return this.i18n.t(countType + 'AtLimit')\n  }\n\n  var translationKeySuffix = remainingNumber < 0 ? 'OverLimit' : 'UnderLimit';\n\n  return this.i18n.t(countType + translationKeySuffix, { count: Math.abs(remainingNumber) })\n};\n\n/**\n * Check if count is over threshold\n *\n * Checks whether the value is over the configured threshold for the input.\n * If there is no configured threshold, it is set to 0 and this function will\n * always return true.\n *\n * @deprecated Will be made private in v5.0\n * @returns {boolean} true if the current count is over the config.threshold\n *   (or no threshold is set)\n */\nCharacterCount.prototype.isOverThreshold = function () {\n  // No threshold means we're always above threshold so save some computation\n  if (!this.config.threshold) {\n    return true\n  }\n\n  var $textarea = this.$textarea;\n\n  // Determine the remaining number of characters/words\n  var currentLength = this.count($textarea.value);\n  var maxLength = this.maxLength;\n\n  var thresholdValue = maxLength * this.config.threshold / 100;\n\n  return (thresholdValue <= currentLength)\n};\n\n/**\n * Character count config\n *\n * @typedef {CharacterCountConfigWithMaxLength | CharacterCountConfigWithMaxWords} CharacterCountConfig\n */\n\n/**\n * Character count config (with maximum number of characters)\n *\n * @typedef {object} CharacterCountConfigWithMaxLength\n * @property {number} [maxlength] - The maximum number of characters.\n *   If maxwords is provided, the maxlength option will be ignored.\n * @property {number} [threshold = 0] - The percentage value of the limit at\n *   which point the count message is displayed. If this attribute is set, the\n *   count message will be hidden by default.\n * @property {CharacterCountTranslations} [i18n = CHARACTER_COUNT_TRANSLATIONS] - See constant {@link CHARACTER_COUNT_TRANSLATIONS}\n */\n\n/**\n * Character count config (with maximum number of words)\n *\n * @typedef {object} CharacterCountConfigWithMaxWords\n * @property {number} [maxwords] - The maximum number of words. If maxwords is\n *   provided, the maxlength option will be ignored.\n * @property {number} [threshold = 0] - The percentage value of the limit at\n *   which point the count message is displayed. If this attribute is set, the\n *   count message will be hidden by default.\n * @property {CharacterCountTranslations} [i18n = CHARACTER_COUNT_TRANSLATIONS] - See constant {@link CHARACTER_COUNT_TRANSLATIONS}\n */\n\n/**\n * Character count translations\n *\n * @typedef {object} CharacterCountTranslations\n *\n * Messages shown to users as they type. It provides feedback on how many words\n * or characters they have remaining or if they are over the limit. This also\n * includes a message used as an accessible description for the textarea.\n * @property {TranslationPluralForms} [charactersUnderLimit] - Message displayed\n *   when the number of characters is under the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [charactersAtLimit] - Message displayed when the number of\n *   characters reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [charactersOverLimit] - Message displayed\n *   when the number of characters is over the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [wordsUnderLimit] - Message displayed when\n *   the number of words is under the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [wordsAtLimit] - Message displayed when the number of\n *   words reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [wordsOverLimit] - Message displayed when\n *   the number of words is over the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [textareaDescription] - Message made\n *   available to assistive technologies, if none is already present in the\n *   HTML, to describe that the component accepts only a limited amount of\n *   content. It is visible on the page when JavaScript is unavailable. The\n *   component will replace the `%{count}` placeholder with the value of the\n *   `maxlength` or `maxwords` parameter.\n */\n\n/**\n * @typedef {import('../../i18n.mjs').TranslationPluralForms} TranslationPluralForms\n */\n\nexport default CharacterCount;\n//# sourceMappingURL=components/character-count/character-count.mjs.map\n"],"mappings":"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C,EAAE;IACzB,OAAO,IAAI,CAAC/C,IAAI,CAACsB,CAAC,CAACgC,SAAS,GAAG,SAAS,CAAC;EAC3C;EAEA,IAAIE,oBAAoB,GAAGT,eAAe,GAAG,CAAC,GAAG,WAAW,GAAG,YAAY;EAE3E,OAAO,IAAI,CAAC/C,IAAI,CAACsB,CAAC,CAACgC,SAAS,GAAGE,oBAAoB,EAAE;IAAEjC,KAAK,EAAEkC,IAAI,CAACC,GAAG,CAACX,eAAe;EAAE,CAAC,CAAC;AAC5F,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAzD,cAAc,CAACwB,SAAS,CAACkC,eAAe,GAAG,YAAY;EACrD;EACA,IAAI,CAAC,IAAI,CAACxD,MAAM,CAACO,SAAS,EAAE;IAC1B,OAAO,IAAI;EACb;EAEA,IAAIL,SAAS,GAAG,IAAI,CAACA,SAAS;;EAE9B;EACA,IAAIiE,aAAa,GAAG,IAAI,CAACpC,KAAK,CAAC7B,SAAS,CAACmD,KAAK,CAAC;EAC/C,IAAItC,SAAS,GAAG,IAAI,CAACA,SAAS;EAE9B,IAAIqD,cAAc,GAAGrD,SAAS,GAAG,IAAI,CAACf,MAAM,CAACO,SAAS,GAAG,GAAG;EAE5D,OAAQ6D,cAAc,IAAID,aAAa;AACzC,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,eAAerE,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}