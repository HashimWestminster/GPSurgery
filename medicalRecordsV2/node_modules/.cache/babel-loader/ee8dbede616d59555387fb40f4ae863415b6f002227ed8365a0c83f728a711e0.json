{"ast":null,"code":"import { generateUniqueID } from '../../common/index.mjs';\nimport '../../vendor/polyfills/Event.mjs';\nimport '../../vendor/polyfills/Function/prototype/bind.mjs';\n\n/* eslint-disable es-x/no-function-prototype-bind -- Polyfill imported */\n\nvar KEY_ENTER = 13;\nvar KEY_SPACE = 32;\n\n/**\n * Details component\n *\n * @class\n * @param {Element} $module - HTML element to use for details\n */\nfunction Details($module) {\n  if (!($module instanceof HTMLElement)) {\n    return this;\n  }\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$module = $module;\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$summary = null;\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$content = null;\n}\n\n/**\n * Initialise component\n */\nDetails.prototype.init = function () {\n  // Check that required elements are present\n  if (!this.$module) {\n    return;\n  }\n\n  // If there is native details support, we want to avoid running code to polyfill native behaviour.\n  var hasNativeDetails = 'HTMLDetailsElement' in window && this.$module instanceof HTMLDetailsElement;\n  if (!hasNativeDetails) {\n    this.polyfillDetails();\n  }\n};\n\n/**\n * Polyfill component in older browsers\n *\n * @deprecated Will be made private in v5.0\n */\nDetails.prototype.polyfillDetails = function () {\n  var $module = this.$module;\n\n  // Save shortcuts to the inner summary and content elements\n  var $summary = this.$summary = $module.getElementsByTagName('summary').item(0);\n  var $content = this.$content = $module.getElementsByTagName('div').item(0);\n\n  // If <details> doesn't have a <summary> and a <div> representing the content\n  // it means the required HTML structure is not met so the script will stop\n  if (!$summary || !$content) {\n    return;\n  }\n\n  // If the content doesn't have an ID, assign it one now\n  // which we'll need for the summary's aria-controls assignment\n  if (!$content.id) {\n    $content.id = 'details-content-' + generateUniqueID();\n  }\n\n  // Add ARIA role=\"group\" to details\n  $module.setAttribute('role', 'group');\n\n  // Add role=button to summary\n  $summary.setAttribute('role', 'button');\n\n  // Add aria-controls\n  $summary.setAttribute('aria-controls', $content.id);\n\n  // Set tabIndex so the summary is keyboard accessible for non-native elements\n  //\n  // We have to use the camelcase `tabIndex` property as there is a bug in IE6/IE7 when we set the correct attribute lowercase:\n  // See http://web.archive.org/web/20170120194036/http://www.saliences.com/browserBugs/tabIndex.html for more information.\n  $summary.tabIndex = 0;\n\n  // Detect initial open state\n  if (this.$module.hasAttribute('open')) {\n    $summary.setAttribute('aria-expanded', 'true');\n  } else {\n    $summary.setAttribute('aria-expanded', 'false');\n    $content.style.display = 'none';\n  }\n\n  // Bind an event to handle summary elements\n  this.polyfillHandleInputs(this.polyfillSetAttributes.bind(this));\n};\n\n/**\n * Define a statechange function that updates aria-expanded and style.display\n *\n * @deprecated Will be made private in v5.0\n * @returns {boolean} Returns true\n */\nDetails.prototype.polyfillSetAttributes = function () {\n  if (this.$module.hasAttribute('open')) {\n    this.$module.removeAttribute('open');\n    this.$summary.setAttribute('aria-expanded', 'false');\n    this.$content.style.display = 'none';\n  } else {\n    this.$module.setAttribute('open', 'open');\n    this.$summary.setAttribute('aria-expanded', 'true');\n    this.$content.style.display = '';\n  }\n  return true;\n};\n\n/**\n * Handle cross-modal click events\n *\n * @deprecated Will be made private in v5.0\n * @param {polyfillHandleInputsCallback} callback - function\n */\nDetails.prototype.polyfillHandleInputs = function (callback) {\n  this.$summary.addEventListener('keypress', function (event) {\n    var $target = event.target;\n    // When the key gets pressed - check if it is enter or space\n    if (event.keyCode === KEY_ENTER || event.keyCode === KEY_SPACE) {\n      if ($target instanceof HTMLElement && $target.nodeName.toLowerCase() === 'summary') {\n        // Prevent space from scrolling the page\n        // and enter from submitting a form\n        event.preventDefault();\n        // Click to let the click event do all the necessary action\n        if ($target.click) {\n          $target.click();\n        } else {\n          // except Safari 5.1 and under don't support .click() here\n          callback(event);\n        }\n      }\n    }\n  });\n\n  // Prevent keyup to prevent clicking twice in Firefox when using space key\n  this.$summary.addEventListener('keyup', function (event) {\n    var $target = event.target;\n    if (event.keyCode === KEY_SPACE) {\n      if ($target instanceof HTMLElement && $target.nodeName.toLowerCase() === 'summary') {\n        event.preventDefault();\n      }\n    }\n  });\n  this.$summary.addEventListener('click', callback);\n};\n\n/**\n * @callback polyfillHandleInputsCallback\n * @param {UIEvent} event - Keyboard or mouse event\n * @returns {void}\n */\n\nexport default Details;","map":{"version":3,"names":["generateUniqueID","KEY_ENTER","KEY_SPACE","Details","$module","HTMLElement","$summary","$content","prototype","init","hasNativeDetails","window","HTMLDetailsElement","polyfillDetails","getElementsByTagName","item","id","setAttribute","tabIndex","hasAttribute","style","display","polyfillHandleInputs","polyfillSetAttributes","bind","removeAttribute","callback","addEventListener","event","$target","target","keyCode","nodeName","toLowerCase","preventDefault","click"],"sources":["C:/Users/thami/Documents/21W- Local Software Dev Group Project/medicalRecordsV2/node_modules/govuk-frontend/govuk-esm/components/details/details.mjs"],"sourcesContent":["import { generateUniqueID } from '../../common/index.mjs';\nimport '../../vendor/polyfills/Event.mjs';\nimport '../../vendor/polyfills/Function/prototype/bind.mjs';\n\n/* eslint-disable es-x/no-function-prototype-bind -- Polyfill imported */\n\nvar KEY_ENTER = 13;\nvar KEY_SPACE = 32;\n\n/**\n * Details component\n *\n * @class\n * @param {Element} $module - HTML element to use for details\n */\nfunction Details ($module) {\n  if (!($module instanceof HTMLElement)) {\n    return this\n  }\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$module = $module;\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$summary = null;\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$content = null;\n}\n\n/**\n * Initialise component\n */\nDetails.prototype.init = function () {\n  // Check that required elements are present\n  if (!this.$module) {\n    return\n  }\n\n  // If there is native details support, we want to avoid running code to polyfill native behaviour.\n  var hasNativeDetails = 'HTMLDetailsElement' in window &&\n    this.$module instanceof HTMLDetailsElement;\n\n  if (!hasNativeDetails) {\n    this.polyfillDetails();\n  }\n};\n\n/**\n * Polyfill component in older browsers\n *\n * @deprecated Will be made private in v5.0\n */\nDetails.prototype.polyfillDetails = function () {\n  var $module = this.$module;\n\n  // Save shortcuts to the inner summary and content elements\n  var $summary = this.$summary = $module.getElementsByTagName('summary').item(0);\n  var $content = this.$content = $module.getElementsByTagName('div').item(0);\n\n  // If <details> doesn't have a <summary> and a <div> representing the content\n  // it means the required HTML structure is not met so the script will stop\n  if (!$summary || !$content) {\n    return\n  }\n\n  // If the content doesn't have an ID, assign it one now\n  // which we'll need for the summary's aria-controls assignment\n  if (!$content.id) {\n    $content.id = 'details-content-' + generateUniqueID();\n  }\n\n  // Add ARIA role=\"group\" to details\n  $module.setAttribute('role', 'group');\n\n  // Add role=button to summary\n  $summary.setAttribute('role', 'button');\n\n  // Add aria-controls\n  $summary.setAttribute('aria-controls', $content.id);\n\n  // Set tabIndex so the summary is keyboard accessible for non-native elements\n  //\n  // We have to use the camelcase `tabIndex` property as there is a bug in IE6/IE7 when we set the correct attribute lowercase:\n  // See http://web.archive.org/web/20170120194036/http://www.saliences.com/browserBugs/tabIndex.html for more information.\n  $summary.tabIndex = 0;\n\n  // Detect initial open state\n  if (this.$module.hasAttribute('open')) {\n    $summary.setAttribute('aria-expanded', 'true');\n  } else {\n    $summary.setAttribute('aria-expanded', 'false');\n    $content.style.display = 'none';\n  }\n\n  // Bind an event to handle summary elements\n  this.polyfillHandleInputs(this.polyfillSetAttributes.bind(this));\n};\n\n/**\n * Define a statechange function that updates aria-expanded and style.display\n *\n * @deprecated Will be made private in v5.0\n * @returns {boolean} Returns true\n */\nDetails.prototype.polyfillSetAttributes = function () {\n  if (this.$module.hasAttribute('open')) {\n    this.$module.removeAttribute('open');\n    this.$summary.setAttribute('aria-expanded', 'false');\n    this.$content.style.display = 'none';\n  } else {\n    this.$module.setAttribute('open', 'open');\n    this.$summary.setAttribute('aria-expanded', 'true');\n    this.$content.style.display = '';\n  }\n\n  return true\n};\n\n/**\n * Handle cross-modal click events\n *\n * @deprecated Will be made private in v5.0\n * @param {polyfillHandleInputsCallback} callback - function\n */\nDetails.prototype.polyfillHandleInputs = function (callback) {\n  this.$summary.addEventListener('keypress', function (event) {\n    var $target = event.target;\n    // When the key gets pressed - check if it is enter or space\n    if (event.keyCode === KEY_ENTER || event.keyCode === KEY_SPACE) {\n      if ($target instanceof HTMLElement && $target.nodeName.toLowerCase() === 'summary') {\n        // Prevent space from scrolling the page\n        // and enter from submitting a form\n        event.preventDefault();\n        // Click to let the click event do all the necessary action\n        if ($target.click) {\n          $target.click();\n        } else {\n          // except Safari 5.1 and under don't support .click() here\n          callback(event);\n        }\n      }\n    }\n  });\n\n  // Prevent keyup to prevent clicking twice in Firefox when using space key\n  this.$summary.addEventListener('keyup', function (event) {\n    var $target = event.target;\n    if (event.keyCode === KEY_SPACE) {\n      if ($target instanceof HTMLElement && $target.nodeName.toLowerCase() === 'summary') {\n        event.preventDefault();\n      }\n    }\n  });\n\n  this.$summary.addEventListener('click', callback);\n};\n\n/**\n * @callback polyfillHandleInputsCallback\n * @param {UIEvent} event - Keyboard or mouse event\n * @returns {void}\n */\n\nexport default Details;\n//# sourceMappingURL=components/details/details.mjs.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}