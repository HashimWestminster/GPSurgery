{"ast":null,"code":"import { mergeConfigs } from '../../common/index.mjs';\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs';\nimport '../../vendor/polyfills/Element/prototype/closest.mjs';\nimport '../../vendor/polyfills/Event.mjs';\nimport '../../vendor/polyfills/Function/prototype/bind.mjs';\n\n/* eslint-disable es-x/no-function-prototype-bind -- Polyfill imported */\n\n/**\n * JavaScript enhancements for the ErrorSummary\n *\n * Takes focus on initialisation for accessible announcement, unless disabled in configuration.\n *\n * @class\n * @param {Element} $module - HTML element to use for error summary\n * @param {ErrorSummaryConfig} [config] - Error summary config\n */\nfunction ErrorSummary($module, config) {\n  // Some consuming code may not be passing a module,\n  // for example if they initialise the component\n  // on their own by directly passing the result\n  // of `document.querySelector`.\n  // To avoid breaking further JavaScript initialisation\n  // we need to safeguard against this so things keep\n  // working the same now we read the elements data attributes\n  if (!($module instanceof HTMLElement)) {\n    // Little safety in case code gets ported as-is\n    // into and ES6 class constructor, where the return value matters\n    return this;\n  }\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$module = $module;\n  var defaultConfig = {\n    disableAutoFocus: false\n  };\n\n  /**\n   * @deprecated Will be made private in v5.0\n   * @type {ErrorSummaryConfig}\n   */\n  this.config = mergeConfigs(defaultConfig, config || {}, normaliseDataset($module.dataset));\n}\n\n/**\n * Initialise component\n */\nErrorSummary.prototype.init = function () {\n  // Check that required elements are present\n  if (!this.$module) {\n    return;\n  }\n  var $module = this.$module;\n  this.setFocus();\n  $module.addEventListener('click', this.handleClick.bind(this));\n};\n\n/**\n * Focus the error summary\n *\n * @deprecated Will be made private in v5.0\n */\nErrorSummary.prototype.setFocus = function () {\n  var $module = this.$module;\n  if (this.config.disableAutoFocus) {\n    return;\n  }\n\n  // Set tabindex to -1 to make the element programmatically focusable, but\n  // remove it on blur as the error summary doesn't need to be focused again.\n  $module.setAttribute('tabindex', '-1');\n  $module.addEventListener('blur', function () {\n    $module.removeAttribute('tabindex');\n  });\n  $module.focus();\n};\n\n/**\n * Click event handler\n *\n * @deprecated Will be made private in v5.0\n * @param {MouseEvent} event - Click event\n */\nErrorSummary.prototype.handleClick = function (event) {\n  var $target = event.target;\n  if (this.focusTarget($target)) {\n    event.preventDefault();\n  }\n};\n\n/**\n * Focus the target element\n *\n * By default, the browser will scroll the target into view. Because our labels\n * or legends appear above the input, this means the user will be presented with\n * an input without any context, as the label or legend will be off the top of\n * the screen.\n *\n * Manually handling the click event, scrolling the question into view and then\n * focussing the element solves this.\n *\n * This also results in the label and/or legend being announced correctly in\n * NVDA (as tested in 2018.3.2) - without this only the field type is announced\n * (e.g. \"Edit, has autocomplete\").\n *\n * @deprecated Will be made private in v5.0\n * @param {EventTarget} $target - Event target\n * @returns {boolean} True if the target was able to be focussed\n */\nErrorSummary.prototype.focusTarget = function ($target) {\n  // If the element that was clicked was not a link, return early\n  if (!($target instanceof HTMLAnchorElement)) {\n    return false;\n  }\n  var inputId = this.getFragmentFromUrl($target.href);\n  if (!inputId) {\n    return false;\n  }\n  var $input = document.getElementById(inputId);\n  if (!$input) {\n    return false;\n  }\n  var $legendOrLabel = this.getAssociatedLegendOrLabel($input);\n  if (!$legendOrLabel) {\n    return false;\n  }\n\n  // Scroll the legend or label into view *before* calling focus on the input to\n  // avoid extra scrolling in browsers that don't support `preventScroll` (which\n  // at time of writing is most of them...)\n  $legendOrLabel.scrollIntoView();\n  $input.focus({\n    preventScroll: true\n  });\n  return true;\n};\n\n/**\n * Get fragment from URL\n *\n * Extract the fragment (everything after the hash) from a URL, but not including\n * the hash.\n *\n * @deprecated Will be made private in v5.0\n * @param {string} url - URL\n * @returns {string | undefined} Fragment from URL, without the hash\n */\nErrorSummary.prototype.getFragmentFromUrl = function (url) {\n  if (url.indexOf('#') === -1) {\n    return undefined;\n  }\n  return url.split('#').pop();\n};\n\n/**\n * Get associated legend or label\n *\n * Returns the first element that exists from this list:\n *\n * - The `<legend>` associated with the closest `<fieldset>` ancestor, as long\n *   as the top of it is no more than half a viewport height away from the\n *   bottom of the input\n * - The first `<label>` that is associated with the input using for=\"inputId\"\n * - The closest parent `<label>`\n *\n * @deprecated Will be made private in v5.0\n * @param {Element} $input - The input\n * @returns {Element | null} Associated legend or label, or null if no associated\n *   legend or label can be found\n */\nErrorSummary.prototype.getAssociatedLegendOrLabel = function ($input) {\n  var $fieldset = $input.closest('fieldset');\n  if ($fieldset) {\n    var $legends = $fieldset.getElementsByTagName('legend');\n    if ($legends.length) {\n      var $candidateLegend = $legends[0];\n\n      // If the input type is radio or checkbox, always use the legend if there\n      // is one.\n      if ($input instanceof HTMLInputElement && ($input.type === 'checkbox' || $input.type === 'radio')) {\n        return $candidateLegend;\n      }\n\n      // For other input types, only scroll to the fieldsetâ€™s legend (instead of\n      // the label associated with the input) if the input would end up in the\n      // top half of the screen.\n      //\n      // This should avoid situations where the input either ends up off the\n      // screen, or obscured by a software keyboard.\n      var legendTop = $candidateLegend.getBoundingClientRect().top;\n      var inputRect = $input.getBoundingClientRect();\n\n      // If the browser doesn't support Element.getBoundingClientRect().height\n      // or window.innerHeight (like IE8), bail and just link to the label.\n      if (inputRect.height && window.innerHeight) {\n        var inputBottom = inputRect.top + inputRect.height;\n        if (inputBottom - legendTop < window.innerHeight / 2) {\n          return $candidateLegend;\n        }\n      }\n    }\n  }\n  return document.querySelector(\"label[for='\" + $input.getAttribute('id') + \"']\") || $input.closest('label');\n};\n\n/**\n * Error summary config\n *\n * @typedef {object} ErrorSummaryConfig\n * @property {boolean} [disableAutoFocus = false] - If set to `true` the error\n *   summary will not be focussed when the page loads.\n */\n\nexport default ErrorSummary;","map":{"version":3,"names":["mergeConfigs","normaliseDataset","ErrorSummary","$module","config","HTMLElement","defaultConfig","disableAutoFocus","dataset","prototype","init","setFocus","addEventListener","handleClick","bind","setAttribute","removeAttribute","focus","event","$target","target","focusTarget","preventDefault","HTMLAnchorElement","inputId","getFragmentFromUrl","href","$input","document","getElementById","$legendOrLabel","getAssociatedLegendOrLabel","scrollIntoView","preventScroll","url","indexOf","undefined","split","pop","$fieldset","closest","$legends","getElementsByTagName","length","$candidateLegend","HTMLInputElement","type","legendTop","getBoundingClientRect","top","inputRect","height","window","innerHeight","inputBottom","querySelector","getAttribute"],"sources":["C:/Users/thami/Documents/21W- Local Software Dev Group Project/medicalRecordsV2/node_modules/govuk-frontend/govuk-esm/components/error-summary/error-summary.mjs"],"sourcesContent":["import { mergeConfigs } from '../../common/index.mjs';\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs';\nimport '../../vendor/polyfills/Element/prototype/closest.mjs';\nimport '../../vendor/polyfills/Event.mjs';\nimport '../../vendor/polyfills/Function/prototype/bind.mjs';\n\n/* eslint-disable es-x/no-function-prototype-bind -- Polyfill imported */\n\n/**\n * JavaScript enhancements for the ErrorSummary\n *\n * Takes focus on initialisation for accessible announcement, unless disabled in configuration.\n *\n * @class\n * @param {Element} $module - HTML element to use for error summary\n * @param {ErrorSummaryConfig} [config] - Error summary config\n */\nfunction ErrorSummary ($module, config) {\n  // Some consuming code may not be passing a module,\n  // for example if they initialise the component\n  // on their own by directly passing the result\n  // of `document.querySelector`.\n  // To avoid breaking further JavaScript initialisation\n  // we need to safeguard against this so things keep\n  // working the same now we read the elements data attributes\n  if (!($module instanceof HTMLElement)) {\n    // Little safety in case code gets ported as-is\n    // into and ES6 class constructor, where the return value matters\n    return this\n  }\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$module = $module;\n\n  var defaultConfig = {\n    disableAutoFocus: false\n  };\n\n  /**\n   * @deprecated Will be made private in v5.0\n   * @type {ErrorSummaryConfig}\n   */\n  this.config = mergeConfigs(\n    defaultConfig,\n    config || {},\n    normaliseDataset($module.dataset)\n  );\n}\n\n/**\n * Initialise component\n */\nErrorSummary.prototype.init = function () {\n  // Check that required elements are present\n  if (!this.$module) {\n    return\n  }\n\n  var $module = this.$module;\n\n  this.setFocus();\n  $module.addEventListener('click', this.handleClick.bind(this));\n};\n\n/**\n * Focus the error summary\n *\n * @deprecated Will be made private in v5.0\n */\nErrorSummary.prototype.setFocus = function () {\n  var $module = this.$module;\n\n  if (this.config.disableAutoFocus) {\n    return\n  }\n\n  // Set tabindex to -1 to make the element programmatically focusable, but\n  // remove it on blur as the error summary doesn't need to be focused again.\n  $module.setAttribute('tabindex', '-1');\n\n  $module.addEventListener('blur', function () {\n    $module.removeAttribute('tabindex');\n  });\n\n  $module.focus();\n};\n\n/**\n * Click event handler\n *\n * @deprecated Will be made private in v5.0\n * @param {MouseEvent} event - Click event\n */\nErrorSummary.prototype.handleClick = function (event) {\n  var $target = event.target;\n  if (this.focusTarget($target)) {\n    event.preventDefault();\n  }\n};\n\n/**\n * Focus the target element\n *\n * By default, the browser will scroll the target into view. Because our labels\n * or legends appear above the input, this means the user will be presented with\n * an input without any context, as the label or legend will be off the top of\n * the screen.\n *\n * Manually handling the click event, scrolling the question into view and then\n * focussing the element solves this.\n *\n * This also results in the label and/or legend being announced correctly in\n * NVDA (as tested in 2018.3.2) - without this only the field type is announced\n * (e.g. \"Edit, has autocomplete\").\n *\n * @deprecated Will be made private in v5.0\n * @param {EventTarget} $target - Event target\n * @returns {boolean} True if the target was able to be focussed\n */\nErrorSummary.prototype.focusTarget = function ($target) {\n  // If the element that was clicked was not a link, return early\n  if (!($target instanceof HTMLAnchorElement)) {\n    return false\n  }\n\n  var inputId = this.getFragmentFromUrl($target.href);\n  if (!inputId) {\n    return false\n  }\n\n  var $input = document.getElementById(inputId);\n  if (!$input) {\n    return false\n  }\n\n  var $legendOrLabel = this.getAssociatedLegendOrLabel($input);\n  if (!$legendOrLabel) {\n    return false\n  }\n\n  // Scroll the legend or label into view *before* calling focus on the input to\n  // avoid extra scrolling in browsers that don't support `preventScroll` (which\n  // at time of writing is most of them...)\n  $legendOrLabel.scrollIntoView();\n  $input.focus({ preventScroll: true });\n\n  return true\n};\n\n/**\n * Get fragment from URL\n *\n * Extract the fragment (everything after the hash) from a URL, but not including\n * the hash.\n *\n * @deprecated Will be made private in v5.0\n * @param {string} url - URL\n * @returns {string | undefined} Fragment from URL, without the hash\n */\nErrorSummary.prototype.getFragmentFromUrl = function (url) {\n  if (url.indexOf('#') === -1) {\n    return undefined\n  }\n\n  return url.split('#').pop()\n};\n\n/**\n * Get associated legend or label\n *\n * Returns the first element that exists from this list:\n *\n * - The `<legend>` associated with the closest `<fieldset>` ancestor, as long\n *   as the top of it is no more than half a viewport height away from the\n *   bottom of the input\n * - The first `<label>` that is associated with the input using for=\"inputId\"\n * - The closest parent `<label>`\n *\n * @deprecated Will be made private in v5.0\n * @param {Element} $input - The input\n * @returns {Element | null} Associated legend or label, or null if no associated\n *   legend or label can be found\n */\nErrorSummary.prototype.getAssociatedLegendOrLabel = function ($input) {\n  var $fieldset = $input.closest('fieldset');\n\n  if ($fieldset) {\n    var $legends = $fieldset.getElementsByTagName('legend');\n\n    if ($legends.length) {\n      var $candidateLegend = $legends[0];\n\n      // If the input type is radio or checkbox, always use the legend if there\n      // is one.\n      if ($input instanceof HTMLInputElement && ($input.type === 'checkbox' || $input.type === 'radio')) {\n        return $candidateLegend\n      }\n\n      // For other input types, only scroll to the fieldsetâ€™s legend (instead of\n      // the label associated with the input) if the input would end up in the\n      // top half of the screen.\n      //\n      // This should avoid situations where the input either ends up off the\n      // screen, or obscured by a software keyboard.\n      var legendTop = $candidateLegend.getBoundingClientRect().top;\n      var inputRect = $input.getBoundingClientRect();\n\n      // If the browser doesn't support Element.getBoundingClientRect().height\n      // or window.innerHeight (like IE8), bail and just link to the label.\n      if (inputRect.height && window.innerHeight) {\n        var inputBottom = inputRect.top + inputRect.height;\n\n        if (inputBottom - legendTop < window.innerHeight / 2) {\n          return $candidateLegend\n        }\n      }\n    }\n  }\n\n  return document.querySelector(\"label[for='\" + $input.getAttribute('id') + \"']\") ||\n    $input.closest('label')\n};\n\n/**\n * Error summary config\n *\n * @typedef {object} ErrorSummaryConfig\n * @property {boolean} [disableAutoFocus = false] - If set to `true` the error\n *   summary will not be focussed when the page loads.\n */\n\nexport default ErrorSummary;\n//# sourceMappingURL=components/error-summary/error-summary.mjs.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}