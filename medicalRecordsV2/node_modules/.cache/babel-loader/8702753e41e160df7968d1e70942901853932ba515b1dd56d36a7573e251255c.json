{"ast":null,"code":"import { nodeListForEach, mergeConfigs, extractConfigByNamespace } from '../../common/index.mjs';\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs';\nimport { I18n } from '../../i18n.mjs';\nimport '../../vendor/polyfills/Element/prototype/classList.mjs';\nimport '../../vendor/polyfills/Element/prototype/closest.mjs';\nimport '../../vendor/polyfills/Event.mjs';\nimport '../../vendor/polyfills/Function/prototype/bind.mjs';\nimport '../../vendor/polyfills/String/prototype/trim.mjs';\n\n/* eslint-disable es-x/no-function-prototype-bind -- Polyfill imported */\n\n/**\n * @constant\n * @type {AccordionTranslations}\n * @see Default value for {@link AccordionConfig.i18n}\n * @default\n */\nvar ACCORDION_TRANSLATIONS = {\n  hideAllSections: 'Hide all sections',\n  hideSection: 'Hide',\n  hideSectionAriaLabel: 'Hide this section',\n  showAllSections: 'Show all sections',\n  showSection: 'Show',\n  showSectionAriaLabel: 'Show this section'\n};\n\n/**\n * Accordion component\n *\n * This allows a collection of sections to be collapsed by default, showing only\n * their headers. Sections can be expanded or collapsed individually by clicking\n * their headers. A \"Show all sections\" button is also added to the top of the\n * accordion, which switches to \"Hide all sections\" when all the sections are\n * expanded.\n *\n * The state of each section is saved to the DOM via the `aria-expanded`\n * attribute, which also provides accessibility.\n *\n * @class\n * @param {Element} $module - HTML element to use for accordion\n * @param {AccordionConfig} [config] - Accordion config\n */\nfunction Accordion($module, config) {\n  if (!($module instanceof HTMLElement)) {\n    return this;\n  }\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$module = $module;\n  var defaultConfig = {\n    i18n: ACCORDION_TRANSLATIONS,\n    rememberExpanded: true\n  };\n\n  /**\n   * @deprecated Will be made private in v5.0\n   * @type {AccordionConfig}\n   */\n  this.config = mergeConfigs(defaultConfig, config || {}, normaliseDataset($module.dataset));\n\n  /** @deprecated Will be made private in v5.0 */\n  this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'));\n\n  /** @deprecated Will be made private in v5.0 */\n  this.controlsClass = 'govuk-accordion__controls';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.showAllClass = 'govuk-accordion__show-all';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.showAllTextClass = 'govuk-accordion__show-all-text';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionClass = 'govuk-accordion__section';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionExpandedClass = 'govuk-accordion__section--expanded';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionButtonClass = 'govuk-accordion__section-button';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionHeaderClass = 'govuk-accordion__section-header';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionHeadingClass = 'govuk-accordion__section-heading';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionHeadingDividerClass = 'govuk-accordion__section-heading-divider';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionHeadingTextClass = 'govuk-accordion__section-heading-text';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionHeadingTextFocusClass = 'govuk-accordion__section-heading-text-focus';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionShowHideToggleClass = 'govuk-accordion__section-toggle';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionShowHideToggleFocusClass = 'govuk-accordion__section-toggle-focus';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionShowHideTextClass = 'govuk-accordion__section-toggle-text';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.upChevronIconClass = 'govuk-accordion-nav__chevron';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.downChevronIconClass = 'govuk-accordion-nav__chevron--down';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionSummaryClass = 'govuk-accordion__section-summary';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionSummaryFocusClass = 'govuk-accordion__section-summary-focus';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionContentClass = 'govuk-accordion__section-content';\n  var $sections = this.$module.querySelectorAll('.' + this.sectionClass);\n  if (!$sections.length) {\n    return this;\n  }\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$sections = $sections;\n\n  /** @deprecated Will be made private in v5.0 */\n  this.browserSupportsSessionStorage = helper.checkForSessionStorage();\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$showAllButton = null;\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$showAllIcon = null;\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$showAllText = null;\n}\n\n/**\n * Initialise component\n */\nAccordion.prototype.init = function () {\n  // Check that required elements are present\n  if (!this.$module || !this.$sections) {\n    return;\n  }\n  this.initControls();\n  this.initSectionHeaders();\n\n  // See if \"Show all sections\" button text should be updated\n  var areAllSectionsOpen = this.checkIfAllSectionsOpen();\n  this.updateShowAllButton(areAllSectionsOpen);\n};\n\n/**\n * Initialise controls and set attributes\n *\n * @deprecated Will be made private in v5.0\n */\nAccordion.prototype.initControls = function () {\n  // Create \"Show all\" button and set attributes\n  this.$showAllButton = document.createElement('button');\n  this.$showAllButton.setAttribute('type', 'button');\n  this.$showAllButton.setAttribute('class', this.showAllClass);\n  this.$showAllButton.setAttribute('aria-expanded', 'false');\n\n  // Create icon, add to element\n  this.$showAllIcon = document.createElement('span');\n  this.$showAllIcon.classList.add(this.upChevronIconClass);\n  this.$showAllButton.appendChild(this.$showAllIcon);\n\n  // Create control wrapper and add controls to it\n  var $accordionControls = document.createElement('div');\n  $accordionControls.setAttribute('class', this.controlsClass);\n  $accordionControls.appendChild(this.$showAllButton);\n  this.$module.insertBefore($accordionControls, this.$module.firstChild);\n\n  // Build additional wrapper for Show all toggle text and place after icon\n  this.$showAllText = document.createElement('span');\n  this.$showAllText.classList.add(this.showAllTextClass);\n  this.$showAllButton.appendChild(this.$showAllText);\n\n  // Handle click events on the show/hide all button\n  this.$showAllButton.addEventListener('click', this.onShowOrHideAllToggle.bind(this));\n\n  // Handle 'beforematch' events, if the user agent supports them\n  if ('onbeforematch' in document) {\n    document.addEventListener('beforematch', this.onBeforeMatch.bind(this));\n  }\n};\n\n/**\n * Initialise section headers\n *\n * @deprecated Will be made private in v5.0\n */\nAccordion.prototype.initSectionHeaders = function () {\n  var $component = this;\n  var $sections = this.$sections;\n\n  // Loop through sections\n  nodeListForEach($sections, function ($section, i) {\n    var $header = $section.querySelector('.' + $component.sectionHeaderClass);\n    if (!$header) {\n      return;\n    }\n\n    // Set header attributes\n    $component.constructHeaderMarkup($header, i);\n    $component.setExpanded($component.isExpanded($section), $section);\n\n    // Handle events\n    $header.addEventListener('click', $component.onSectionToggle.bind($component, $section));\n\n    // See if there is any state stored in sessionStorage and set the sections to\n    // open or closed.\n    $component.setInitialState($section);\n  });\n};\n\n/**\n * Construct section header\n *\n * @deprecated Will be made private in v5.0\n * @param {Element} $header - Section header\n * @param {number} index - Section index\n */\nAccordion.prototype.constructHeaderMarkup = function ($header, index) {\n  var $span = $header.querySelector('.' + this.sectionButtonClass);\n  var $heading = $header.querySelector('.' + this.sectionHeadingClass);\n  var $summary = $header.querySelector('.' + this.sectionSummaryClass);\n  if (!$span || !$heading) {\n    return;\n  }\n\n  // Create a button element that will replace the '.govuk-accordion__section-button' span\n  var $button = document.createElement('button');\n  $button.setAttribute('type', 'button');\n  $button.setAttribute('aria-controls', this.$module.id + '-content-' + (index + 1).toString());\n\n  // Copy all attributes (https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes) from $span to $button\n  for (var i = 0; i < $span.attributes.length; i++) {\n    var attr = $span.attributes.item(i);\n    // Add all attributes but not ID as this is being added to\n    // the section heading ($headingText)\n    if (attr.nodeName !== 'id') {\n      $button.setAttribute(attr.nodeName, attr.nodeValue);\n    }\n  }\n\n  // Create container for heading text so it can be styled\n  var $headingText = document.createElement('span');\n  $headingText.classList.add(this.sectionHeadingTextClass);\n  // Copy the span ID to the heading text to allow it to be referenced by `aria-labelledby` on the\n  // hidden content area without \"Show this section\"\n  $headingText.id = $span.id;\n\n  // Create an inner heading text container to limit the width of the focus state\n  var $headingTextFocus = document.createElement('span');\n  $headingTextFocus.classList.add(this.sectionHeadingTextFocusClass);\n  $headingText.appendChild($headingTextFocus);\n  // span could contain HTML elements (see https://www.w3.org/TR/2011/WD-html5-20110525/content-models.html#phrasing-content)\n  $headingTextFocus.innerHTML = $span.innerHTML;\n\n  // Create container for show / hide icons and text.\n  var $showHideToggle = document.createElement('span');\n  $showHideToggle.classList.add(this.sectionShowHideToggleClass);\n  // Tell Google not to index the 'show' text as part of the heading\n  // For the snippet to work with JavaScript, it must be added before adding the page element to the\n  // page's DOM. See https://developers.google.com/search/docs/advanced/robots/robots_meta_tag#data-nosnippet-attr\n  $showHideToggle.setAttribute('data-nosnippet', '');\n  // Create an inner container to limit the width of the focus state\n  var $showHideToggleFocus = document.createElement('span');\n  $showHideToggleFocus.classList.add(this.sectionShowHideToggleFocusClass);\n  $showHideToggle.appendChild($showHideToggleFocus);\n  // Create wrapper for the show / hide text. Append text after the show/hide icon\n  var $showHideText = document.createElement('span');\n  var $showHideIcon = document.createElement('span');\n  $showHideIcon.classList.add(this.upChevronIconClass);\n  $showHideToggleFocus.appendChild($showHideIcon);\n  $showHideText.classList.add(this.sectionShowHideTextClass);\n  $showHideToggleFocus.appendChild($showHideText);\n\n  // Append elements to the button:\n  // 1. Heading text\n  // 2. Punctuation\n  // 3. (Optional: Summary line followed by punctuation)\n  // 4. Show / hide toggle\n  $button.appendChild($headingText);\n  $button.appendChild(this.getButtonPunctuationEl());\n\n  // If summary content exists add to DOM in correct order\n  if ($summary) {\n    // Create a new `span` element and copy the summary line content from the original `div` to the\n    // new `span`\n    // This is because the summary line text is now inside a button element, which can only contain\n    // phrasing content\n    var $summarySpan = document.createElement('span');\n    // Create an inner summary container to limit the width of the summary focus state\n    var $summarySpanFocus = document.createElement('span');\n    $summarySpanFocus.classList.add(this.sectionSummaryFocusClass);\n    $summarySpan.appendChild($summarySpanFocus);\n\n    // Get original attributes, and pass them to the replacement\n    for (var j = 0, l = $summary.attributes.length; j < l; ++j) {\n      var nodeName = $summary.attributes.item(j).nodeName;\n      var nodeValue = $summary.attributes.item(j).nodeValue;\n      $summarySpan.setAttribute(nodeName, nodeValue);\n    }\n\n    // Copy original contents of summary to the new summary span\n    $summarySpanFocus.innerHTML = $summary.innerHTML;\n\n    // Replace the original summary `div` with the new summary `span`\n    $summary.parentNode.replaceChild($summarySpan, $summary);\n    $button.appendChild($summarySpan);\n    $button.appendChild(this.getButtonPunctuationEl());\n  }\n  $button.appendChild($showHideToggle);\n  $heading.removeChild($span);\n  $heading.appendChild($button);\n};\n\n/**\n * When a section is opened by the user agent via the 'beforematch' event\n *\n * @deprecated Will be made private in v5.0\n * @param {Event} event - Generic event\n */\nAccordion.prototype.onBeforeMatch = function (event) {\n  var $fragment = event.target;\n\n  // Handle elements with `.closest()` support only\n  if (!($fragment instanceof Element)) {\n    return;\n  }\n\n  // Handle when fragment is inside section\n  var $section = $fragment.closest('.' + this.sectionClass);\n  if ($section) {\n    this.setExpanded(true, $section);\n  }\n};\n\n/**\n * When section toggled, set and store state\n *\n * @deprecated Will be made private in v5.0\n * @param {Element} $section - Section element\n */\nAccordion.prototype.onSectionToggle = function ($section) {\n  var expanded = this.isExpanded($section);\n  this.setExpanded(!expanded, $section);\n\n  // Store the state in sessionStorage when a change is triggered\n  this.storeState($section);\n};\n\n/**\n * When Open/Close All toggled, set and store state\n *\n * @deprecated Will be made private in v5.0\n */\nAccordion.prototype.onShowOrHideAllToggle = function () {\n  var $component = this;\n  var $sections = this.$sections;\n  var nowExpanded = !this.checkIfAllSectionsOpen();\n\n  // Loop through sections\n  nodeListForEach($sections, function ($section) {\n    $component.setExpanded(nowExpanded, $section);\n    // Store the state in sessionStorage when a change is triggered\n    $component.storeState($section);\n  });\n  $component.updateShowAllButton(nowExpanded);\n};\n\n/**\n * Set section attributes when opened/closed\n *\n * @deprecated Will be made private in v5.0\n * @param {boolean} expanded - Section expanded\n * @param {Element} $section - Section element\n */\nAccordion.prototype.setExpanded = function (expanded, $section) {\n  var $showHideIcon = $section.querySelector('.' + this.upChevronIconClass);\n  var $showHideText = $section.querySelector('.' + this.sectionShowHideTextClass);\n  var $button = $section.querySelector('.' + this.sectionButtonClass);\n  var $content = $section.querySelector('.' + this.sectionContentClass);\n  if (!$showHideIcon || !($showHideText instanceof HTMLElement) || !$button || !$content) {\n    return;\n  }\n  var newButtonText = expanded ? this.i18n.t('hideSection') : this.i18n.t('showSection');\n  $showHideText.innerText = newButtonText;\n  $button.setAttribute('aria-expanded', expanded.toString());\n\n  // Update aria-label combining\n  var ariaLabelParts = [];\n  var $headingText = $section.querySelector('.' + this.sectionHeadingTextClass);\n  if ($headingText instanceof HTMLElement) {\n    ariaLabelParts.push($headingText.innerText.trim());\n  }\n  var $summary = $section.querySelector('.' + this.sectionSummaryClass);\n  if ($summary instanceof HTMLElement) {\n    ariaLabelParts.push($summary.innerText.trim());\n  }\n  var ariaLabelMessage = expanded ? this.i18n.t('hideSectionAriaLabel') : this.i18n.t('showSectionAriaLabel');\n  ariaLabelParts.push(ariaLabelMessage);\n\n  /*\n   * Join with a comma to add pause for assistive technology.\n   * Example: [heading]Section A ,[pause] Show this section.\n   * https://accessibility.blog.gov.uk/2017/12/18/what-working-on-gov-uk-navigation-taught-us-about-accessibility/\n   */\n  $button.setAttribute('aria-label', ariaLabelParts.join(' , '));\n\n  // Swap icon, change class\n  if (expanded) {\n    $content.removeAttribute('hidden');\n    $section.classList.add(this.sectionExpandedClass);\n    $showHideIcon.classList.remove(this.downChevronIconClass);\n  } else {\n    $content.setAttribute('hidden', 'until-found');\n    $section.classList.remove(this.sectionExpandedClass);\n    $showHideIcon.classList.add(this.downChevronIconClass);\n  }\n\n  // See if \"Show all sections\" button text should be updated\n  var areAllSectionsOpen = this.checkIfAllSectionsOpen();\n  this.updateShowAllButton(areAllSectionsOpen);\n};\n\n/**\n * Get state of section\n *\n * @deprecated Will be made private in v5.0\n * @param {Element} $section - Section element\n * @returns {boolean} True if expanded\n */\nAccordion.prototype.isExpanded = function ($section) {\n  return $section.classList.contains(this.sectionExpandedClass);\n};\n\n/**\n * Check if all sections are open\n *\n * @deprecated Will be made private in v5.0\n * @returns {boolean} True if all sections are open\n */\nAccordion.prototype.checkIfAllSectionsOpen = function () {\n  // Get a count of all the Accordion sections\n  var sectionsCount = this.$sections.length;\n  // Get a count of all Accordion sections that are expanded\n  var expandedSectionCount = this.$module.querySelectorAll('.' + this.sectionExpandedClass).length;\n  var areAllSectionsOpen = sectionsCount === expandedSectionCount;\n  return areAllSectionsOpen;\n};\n\n/**\n * Update \"Show all sections\" button\n *\n * @deprecated Will be made private in v5.0\n * @param {boolean} expanded - Section expanded\n */\nAccordion.prototype.updateShowAllButton = function (expanded) {\n  var newButtonText = expanded ? this.i18n.t('hideAllSections') : this.i18n.t('showAllSections');\n  this.$showAllButton.setAttribute('aria-expanded', expanded.toString());\n  this.$showAllText.innerText = newButtonText;\n\n  // Swap icon, toggle class\n  if (expanded) {\n    this.$showAllIcon.classList.remove(this.downChevronIconClass);\n  } else {\n    this.$showAllIcon.classList.add(this.downChevronIconClass);\n  }\n};\nvar helper = {\n  /**\n   * Check for `window.sessionStorage`, and that it actually works.\n   *\n   * @returns {boolean} True if session storage is available\n   */\n  checkForSessionStorage: function () {\n    var testString = 'this is the test string';\n    var result;\n    try {\n      window.sessionStorage.setItem(testString, testString);\n      result = window.sessionStorage.getItem(testString) === testString.toString();\n      window.sessionStorage.removeItem(testString);\n      return result;\n    } catch (exception) {\n      return false;\n    }\n  }\n};\n\n/**\n * Set the state of the accordions in sessionStorage\n *\n * @deprecated Will be made private in v5.0\n * @param {Element} $section - Section element\n */\nAccordion.prototype.storeState = function ($section) {\n  if (this.browserSupportsSessionStorage && this.config.rememberExpanded) {\n    // We need a unique way of identifying each content in the Accordion. Since\n    // an `#id` should be unique and an `id` is required for `aria-` attributes\n    // `id` can be safely used.\n    var $button = $section.querySelector('.' + this.sectionButtonClass);\n    if ($button) {\n      var contentId = $button.getAttribute('aria-controls');\n      var contentState = $button.getAttribute('aria-expanded');\n\n      // Only set the state when both `contentId` and `contentState` are taken from the DOM.\n      if (contentId && contentState) {\n        window.sessionStorage.setItem(contentId, contentState);\n      }\n    }\n  }\n};\n\n/**\n * Read the state of the accordions from sessionStorage\n *\n * @deprecated Will be made private in v5.0\n * @param {Element} $section - Section element\n */\nAccordion.prototype.setInitialState = function ($section) {\n  if (this.browserSupportsSessionStorage && this.config.rememberExpanded) {\n    var $button = $section.querySelector('.' + this.sectionButtonClass);\n    if ($button) {\n      var contentId = $button.getAttribute('aria-controls');\n      var contentState = contentId ? window.sessionStorage.getItem(contentId) : null;\n      if (contentState !== null) {\n        this.setExpanded(contentState === 'true', $section);\n      }\n    }\n  }\n};\n\n/**\n * Create an element to improve semantics of the section button with punctuation\n *\n * Adding punctuation to the button can also improve its general semantics by dividing its contents\n * into thematic chunks.\n * See https://github.com/alphagov/govuk-frontend/issues/2327#issuecomment-922957442\n *\n * @deprecated Will be made private in v5.0\n * @returns {Element} DOM element\n */\nAccordion.prototype.getButtonPunctuationEl = function () {\n  var $punctuationEl = document.createElement('span');\n  $punctuationEl.classList.add('govuk-visually-hidden', this.sectionHeadingDividerClass);\n  $punctuationEl.innerHTML = ', ';\n  return $punctuationEl;\n};\n\n/**\n * Accordion config\n *\n * @typedef {object} AccordionConfig\n * @property {AccordionTranslations} [i18n = ACCORDION_TRANSLATIONS] - See constant {@link ACCORDION_TRANSLATIONS}\n * @property {boolean} [rememberExpanded] - Whether the expanded and collapsed\n *   state of each section is remembered and restored when navigating.\n */\n\n/**\n * Accordion translations\n *\n * @typedef {object} AccordionTranslations\n *\n * Messages used by the component for the labels of its buttons. This includes\n * the visible text shown on screen, and text to help assistive technology users\n * for the buttons toggling each section.\n * @property {string} [hideAllSections] - The text content for the 'Hide all\n *   sections' button, used when at least one section is expanded.\n * @property {string} [hideSection] - The text content for the 'Hide'\n *   button, used when a section is expanded.\n * @property {string} [hideSectionAriaLabel] - The text content appended to the\n *   'Hide' button's accessible name when a section is expanded.\n * @property {string} [showAllSections] - The text content for the 'Show all\n *   sections' button, used when all sections are collapsed.\n * @property {string} [showSection] - The text content for the 'Show'\n *   button, used when a section is collapsed.\n * @property {string} [showSectionAriaLabel] - The text content appended to the\n *   'Show' button's accessible name when a section is expanded.\n */\n\nexport default Accordion;","map":{"version":3,"names":["nodeListForEach","mergeConfigs","extractConfigByNamespace","normaliseDataset","I18n","ACCORDION_TRANSLATIONS","hideAllSections","hideSection","hideSectionAriaLabel","showAllSections","showSection","showSectionAriaLabel","Accordion","$module","config","HTMLElement","defaultConfig","i18n","rememberExpanded","dataset","controlsClass","showAllClass","showAllTextClass","sectionClass","sectionExpandedClass","sectionButtonClass","sectionHeaderClass","sectionHeadingClass","sectionHeadingDividerClass","sectionHeadingTextClass","sectionHeadingTextFocusClass","sectionShowHideToggleClass","sectionShowHideToggleFocusClass","sectionShowHideTextClass","upChevronIconClass","downChevronIconClass","sectionSummaryClass","sectionSummaryFocusClass","sectionContentClass","$sections","querySelectorAll","length","browserSupportsSessionStorage","helper","checkForSessionStorage","$showAllButton","$showAllIcon","$showAllText","prototype","init","initControls","initSectionHeaders","areAllSectionsOpen","checkIfAllSectionsOpen","updateShowAllButton","document","createElement","setAttribute","classList","add","appendChild","$accordionControls","insertBefore","firstChild","addEventListener","onShowOrHideAllToggle","bind","onBeforeMatch","$component","$section","i","$header","querySelector","constructHeaderMarkup","setExpanded","isExpanded","onSectionToggle","setInitialState","index","$span","$heading","$summary","$button","id","toString","attributes","attr","item","nodeName","nodeValue","$headingText","$headingTextFocus","innerHTML","$showHideToggle","$showHideToggleFocus","$showHideText","$showHideIcon","getButtonPunctuationEl","$summarySpan","$summarySpanFocus","j","l","parentNode","replaceChild","removeChild","event","$fragment","target","Element","closest","expanded","storeState","nowExpanded","$content","newButtonText","t","innerText","ariaLabelParts","push","trim","ariaLabelMessage","join","removeAttribute","remove","contains","sectionsCount","expandedSectionCount","testString","result","window","sessionStorage","setItem","getItem","removeItem","exception","contentId","getAttribute","contentState","$punctuationEl"],"sources":["C:/Users/thami/Documents/21W- Local Software Dev Group Project/medicalRecordsV2/node_modules/govuk-frontend/govuk-esm/components/accordion/accordion.mjs"],"sourcesContent":["import { nodeListForEach, mergeConfigs, extractConfigByNamespace } from '../../common/index.mjs';\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs';\nimport { I18n } from '../../i18n.mjs';\nimport '../../vendor/polyfills/Element/prototype/classList.mjs';\nimport '../../vendor/polyfills/Element/prototype/closest.mjs';\nimport '../../vendor/polyfills/Event.mjs';\nimport '../../vendor/polyfills/Function/prototype/bind.mjs';\nimport '../../vendor/polyfills/String/prototype/trim.mjs';\n\n/* eslint-disable es-x/no-function-prototype-bind -- Polyfill imported */\n\n/**\n * @constant\n * @type {AccordionTranslations}\n * @see Default value for {@link AccordionConfig.i18n}\n * @default\n */\nvar ACCORDION_TRANSLATIONS = {\n  hideAllSections: 'Hide all sections',\n  hideSection: 'Hide',\n  hideSectionAriaLabel: 'Hide this section',\n  showAllSections: 'Show all sections',\n  showSection: 'Show',\n  showSectionAriaLabel: 'Show this section'\n};\n\n/**\n * Accordion component\n *\n * This allows a collection of sections to be collapsed by default, showing only\n * their headers. Sections can be expanded or collapsed individually by clicking\n * their headers. A \"Show all sections\" button is also added to the top of the\n * accordion, which switches to \"Hide all sections\" when all the sections are\n * expanded.\n *\n * The state of each section is saved to the DOM via the `aria-expanded`\n * attribute, which also provides accessibility.\n *\n * @class\n * @param {Element} $module - HTML element to use for accordion\n * @param {AccordionConfig} [config] - Accordion config\n */\nfunction Accordion ($module, config) {\n  if (!($module instanceof HTMLElement)) {\n    return this\n  }\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$module = $module;\n\n  var defaultConfig = {\n    i18n: ACCORDION_TRANSLATIONS,\n    rememberExpanded: true\n  };\n\n  /**\n   * @deprecated Will be made private in v5.0\n   * @type {AccordionConfig}\n   */\n  this.config = mergeConfigs(\n    defaultConfig,\n    config || {},\n    normaliseDataset($module.dataset)\n  );\n\n  /** @deprecated Will be made private in v5.0 */\n  this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'));\n\n  /** @deprecated Will be made private in v5.0 */\n  this.controlsClass = 'govuk-accordion__controls';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.showAllClass = 'govuk-accordion__show-all';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.showAllTextClass = 'govuk-accordion__show-all-text';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionClass = 'govuk-accordion__section';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionExpandedClass = 'govuk-accordion__section--expanded';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionButtonClass = 'govuk-accordion__section-button';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionHeaderClass = 'govuk-accordion__section-header';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionHeadingClass = 'govuk-accordion__section-heading';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionHeadingDividerClass = 'govuk-accordion__section-heading-divider';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionHeadingTextClass = 'govuk-accordion__section-heading-text';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionHeadingTextFocusClass = 'govuk-accordion__section-heading-text-focus';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionShowHideToggleClass = 'govuk-accordion__section-toggle';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionShowHideToggleFocusClass = 'govuk-accordion__section-toggle-focus';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionShowHideTextClass = 'govuk-accordion__section-toggle-text';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.upChevronIconClass = 'govuk-accordion-nav__chevron';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.downChevronIconClass = 'govuk-accordion-nav__chevron--down';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionSummaryClass = 'govuk-accordion__section-summary';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionSummaryFocusClass = 'govuk-accordion__section-summary-focus';\n\n  /** @deprecated Will be made private in v5.0 */\n  this.sectionContentClass = 'govuk-accordion__section-content';\n\n  var $sections = this.$module.querySelectorAll('.' + this.sectionClass);\n  if (!$sections.length) {\n    return this\n  }\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$sections = $sections;\n\n  /** @deprecated Will be made private in v5.0 */\n  this.browserSupportsSessionStorage = helper.checkForSessionStorage();\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$showAllButton = null;\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$showAllIcon = null;\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$showAllText = null;\n}\n\n/**\n * Initialise component\n */\nAccordion.prototype.init = function () {\n  // Check that required elements are present\n  if (!this.$module || !this.$sections) {\n    return\n  }\n\n  this.initControls();\n  this.initSectionHeaders();\n\n  // See if \"Show all sections\" button text should be updated\n  var areAllSectionsOpen = this.checkIfAllSectionsOpen();\n  this.updateShowAllButton(areAllSectionsOpen);\n};\n\n/**\n * Initialise controls and set attributes\n *\n * @deprecated Will be made private in v5.0\n */\nAccordion.prototype.initControls = function () {\n  // Create \"Show all\" button and set attributes\n  this.$showAllButton = document.createElement('button');\n  this.$showAllButton.setAttribute('type', 'button');\n  this.$showAllButton.setAttribute('class', this.showAllClass);\n  this.$showAllButton.setAttribute('aria-expanded', 'false');\n\n  // Create icon, add to element\n  this.$showAllIcon = document.createElement('span');\n  this.$showAllIcon.classList.add(this.upChevronIconClass);\n  this.$showAllButton.appendChild(this.$showAllIcon);\n\n  // Create control wrapper and add controls to it\n  var $accordionControls = document.createElement('div');\n  $accordionControls.setAttribute('class', this.controlsClass);\n  $accordionControls.appendChild(this.$showAllButton);\n  this.$module.insertBefore($accordionControls, this.$module.firstChild);\n\n  // Build additional wrapper for Show all toggle text and place after icon\n  this.$showAllText = document.createElement('span');\n  this.$showAllText.classList.add(this.showAllTextClass);\n  this.$showAllButton.appendChild(this.$showAllText);\n\n  // Handle click events on the show/hide all button\n  this.$showAllButton.addEventListener('click', this.onShowOrHideAllToggle.bind(this));\n\n  // Handle 'beforematch' events, if the user agent supports them\n  if ('onbeforematch' in document) {\n    document.addEventListener('beforematch', this.onBeforeMatch.bind(this));\n  }\n};\n\n/**\n * Initialise section headers\n *\n * @deprecated Will be made private in v5.0\n */\nAccordion.prototype.initSectionHeaders = function () {\n  var $component = this;\n  var $sections = this.$sections;\n\n  // Loop through sections\n  nodeListForEach($sections, function ($section, i) {\n    var $header = $section.querySelector('.' + $component.sectionHeaderClass);\n    if (!$header) {\n      return\n    }\n\n    // Set header attributes\n    $component.constructHeaderMarkup($header, i);\n    $component.setExpanded($component.isExpanded($section), $section);\n\n    // Handle events\n    $header.addEventListener('click', $component.onSectionToggle.bind($component, $section));\n\n    // See if there is any state stored in sessionStorage and set the sections to\n    // open or closed.\n    $component.setInitialState($section);\n  });\n};\n\n/**\n * Construct section header\n *\n * @deprecated Will be made private in v5.0\n * @param {Element} $header - Section header\n * @param {number} index - Section index\n */\nAccordion.prototype.constructHeaderMarkup = function ($header, index) {\n  var $span = $header.querySelector('.' + this.sectionButtonClass);\n  var $heading = $header.querySelector('.' + this.sectionHeadingClass);\n  var $summary = $header.querySelector('.' + this.sectionSummaryClass);\n\n  if (!$span || !$heading) {\n    return\n  }\n\n  // Create a button element that will replace the '.govuk-accordion__section-button' span\n  var $button = document.createElement('button');\n  $button.setAttribute('type', 'button');\n  $button.setAttribute('aria-controls', this.$module.id + '-content-' + (index + 1).toString());\n\n  // Copy all attributes (https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes) from $span to $button\n  for (var i = 0; i < $span.attributes.length; i++) {\n    var attr = $span.attributes.item(i);\n    // Add all attributes but not ID as this is being added to\n    // the section heading ($headingText)\n    if (attr.nodeName !== 'id') {\n      $button.setAttribute(attr.nodeName, attr.nodeValue);\n    }\n  }\n\n  // Create container for heading text so it can be styled\n  var $headingText = document.createElement('span');\n  $headingText.classList.add(this.sectionHeadingTextClass);\n  // Copy the span ID to the heading text to allow it to be referenced by `aria-labelledby` on the\n  // hidden content area without \"Show this section\"\n  $headingText.id = $span.id;\n\n  // Create an inner heading text container to limit the width of the focus state\n  var $headingTextFocus = document.createElement('span');\n  $headingTextFocus.classList.add(this.sectionHeadingTextFocusClass);\n  $headingText.appendChild($headingTextFocus);\n  // span could contain HTML elements (see https://www.w3.org/TR/2011/WD-html5-20110525/content-models.html#phrasing-content)\n  $headingTextFocus.innerHTML = $span.innerHTML;\n\n  // Create container for show / hide icons and text.\n  var $showHideToggle = document.createElement('span');\n  $showHideToggle.classList.add(this.sectionShowHideToggleClass);\n  // Tell Google not to index the 'show' text as part of the heading\n  // For the snippet to work with JavaScript, it must be added before adding the page element to the\n  // page's DOM. See https://developers.google.com/search/docs/advanced/robots/robots_meta_tag#data-nosnippet-attr\n  $showHideToggle.setAttribute('data-nosnippet', '');\n  // Create an inner container to limit the width of the focus state\n  var $showHideToggleFocus = document.createElement('span');\n  $showHideToggleFocus.classList.add(this.sectionShowHideToggleFocusClass);\n  $showHideToggle.appendChild($showHideToggleFocus);\n  // Create wrapper for the show / hide text. Append text after the show/hide icon\n  var $showHideText = document.createElement('span');\n  var $showHideIcon = document.createElement('span');\n  $showHideIcon.classList.add(this.upChevronIconClass);\n  $showHideToggleFocus.appendChild($showHideIcon);\n  $showHideText.classList.add(this.sectionShowHideTextClass);\n  $showHideToggleFocus.appendChild($showHideText);\n\n  // Append elements to the button:\n  // 1. Heading text\n  // 2. Punctuation\n  // 3. (Optional: Summary line followed by punctuation)\n  // 4. Show / hide toggle\n  $button.appendChild($headingText);\n  $button.appendChild(this.getButtonPunctuationEl());\n\n  // If summary content exists add to DOM in correct order\n  if ($summary) {\n    // Create a new `span` element and copy the summary line content from the original `div` to the\n    // new `span`\n    // This is because the summary line text is now inside a button element, which can only contain\n    // phrasing content\n    var $summarySpan = document.createElement('span');\n    // Create an inner summary container to limit the width of the summary focus state\n    var $summarySpanFocus = document.createElement('span');\n    $summarySpanFocus.classList.add(this.sectionSummaryFocusClass);\n    $summarySpan.appendChild($summarySpanFocus);\n\n    // Get original attributes, and pass them to the replacement\n    for (var j = 0, l = $summary.attributes.length; j < l; ++j) {\n      var nodeName = $summary.attributes.item(j).nodeName;\n      var nodeValue = $summary.attributes.item(j).nodeValue;\n      $summarySpan.setAttribute(nodeName, nodeValue);\n    }\n\n    // Copy original contents of summary to the new summary span\n    $summarySpanFocus.innerHTML = $summary.innerHTML;\n\n    // Replace the original summary `div` with the new summary `span`\n    $summary.parentNode.replaceChild($summarySpan, $summary);\n\n    $button.appendChild($summarySpan);\n    $button.appendChild(this.getButtonPunctuationEl());\n  }\n\n  $button.appendChild($showHideToggle);\n\n  $heading.removeChild($span);\n  $heading.appendChild($button);\n};\n\n/**\n * When a section is opened by the user agent via the 'beforematch' event\n *\n * @deprecated Will be made private in v5.0\n * @param {Event} event - Generic event\n */\nAccordion.prototype.onBeforeMatch = function (event) {\n  var $fragment = event.target;\n\n  // Handle elements with `.closest()` support only\n  if (!($fragment instanceof Element)) {\n    return\n  }\n\n  // Handle when fragment is inside section\n  var $section = $fragment.closest('.' + this.sectionClass);\n  if ($section) {\n    this.setExpanded(true, $section);\n  }\n};\n\n/**\n * When section toggled, set and store state\n *\n * @deprecated Will be made private in v5.0\n * @param {Element} $section - Section element\n */\nAccordion.prototype.onSectionToggle = function ($section) {\n  var expanded = this.isExpanded($section);\n  this.setExpanded(!expanded, $section);\n\n  // Store the state in sessionStorage when a change is triggered\n  this.storeState($section);\n};\n\n/**\n * When Open/Close All toggled, set and store state\n *\n * @deprecated Will be made private in v5.0\n */\nAccordion.prototype.onShowOrHideAllToggle = function () {\n  var $component = this;\n  var $sections = this.$sections;\n\n  var nowExpanded = !this.checkIfAllSectionsOpen();\n\n  // Loop through sections\n  nodeListForEach($sections, function ($section) {\n    $component.setExpanded(nowExpanded, $section);\n    // Store the state in sessionStorage when a change is triggered\n    $component.storeState($section);\n  });\n\n  $component.updateShowAllButton(nowExpanded);\n};\n\n/**\n * Set section attributes when opened/closed\n *\n * @deprecated Will be made private in v5.0\n * @param {boolean} expanded - Section expanded\n * @param {Element} $section - Section element\n */\nAccordion.prototype.setExpanded = function (expanded, $section) {\n  var $showHideIcon = $section.querySelector('.' + this.upChevronIconClass);\n  var $showHideText = $section.querySelector('.' + this.sectionShowHideTextClass);\n  var $button = $section.querySelector('.' + this.sectionButtonClass);\n  var $content = $section.querySelector('.' + this.sectionContentClass);\n\n  if (!$showHideIcon ||\n    !($showHideText instanceof HTMLElement) ||\n    !$button ||\n    !$content) {\n    return\n  }\n\n  var newButtonText = expanded\n    ? this.i18n.t('hideSection')\n    : this.i18n.t('showSection');\n\n  $showHideText.innerText = newButtonText;\n  $button.setAttribute('aria-expanded', expanded.toString());\n\n  // Update aria-label combining\n  var ariaLabelParts = [];\n\n  var $headingText = $section.querySelector('.' + this.sectionHeadingTextClass);\n  if ($headingText instanceof HTMLElement) {\n    ariaLabelParts.push($headingText.innerText.trim());\n  }\n\n  var $summary = $section.querySelector('.' + this.sectionSummaryClass);\n  if ($summary instanceof HTMLElement) {\n    ariaLabelParts.push($summary.innerText.trim());\n  }\n\n  var ariaLabelMessage = expanded\n    ? this.i18n.t('hideSectionAriaLabel')\n    : this.i18n.t('showSectionAriaLabel');\n  ariaLabelParts.push(ariaLabelMessage);\n\n  /*\n   * Join with a comma to add pause for assistive technology.\n   * Example: [heading]Section A ,[pause] Show this section.\n   * https://accessibility.blog.gov.uk/2017/12/18/what-working-on-gov-uk-navigation-taught-us-about-accessibility/\n   */\n  $button.setAttribute('aria-label', ariaLabelParts.join(' , '));\n\n  // Swap icon, change class\n  if (expanded) {\n    $content.removeAttribute('hidden');\n    $section.classList.add(this.sectionExpandedClass);\n    $showHideIcon.classList.remove(this.downChevronIconClass);\n  } else {\n    $content.setAttribute('hidden', 'until-found');\n    $section.classList.remove(this.sectionExpandedClass);\n    $showHideIcon.classList.add(this.downChevronIconClass);\n  }\n\n  // See if \"Show all sections\" button text should be updated\n  var areAllSectionsOpen = this.checkIfAllSectionsOpen();\n  this.updateShowAllButton(areAllSectionsOpen);\n};\n\n/**\n * Get state of section\n *\n * @deprecated Will be made private in v5.0\n * @param {Element} $section - Section element\n * @returns {boolean} True if expanded\n */\nAccordion.prototype.isExpanded = function ($section) {\n  return $section.classList.contains(this.sectionExpandedClass)\n};\n\n/**\n * Check if all sections are open\n *\n * @deprecated Will be made private in v5.0\n * @returns {boolean} True if all sections are open\n */\nAccordion.prototype.checkIfAllSectionsOpen = function () {\n  // Get a count of all the Accordion sections\n  var sectionsCount = this.$sections.length;\n  // Get a count of all Accordion sections that are expanded\n  var expandedSectionCount = this.$module.querySelectorAll('.' + this.sectionExpandedClass).length;\n  var areAllSectionsOpen = sectionsCount === expandedSectionCount;\n\n  return areAllSectionsOpen\n};\n\n/**\n * Update \"Show all sections\" button\n *\n * @deprecated Will be made private in v5.0\n * @param {boolean} expanded - Section expanded\n */\nAccordion.prototype.updateShowAllButton = function (expanded) {\n  var newButtonText = expanded\n    ? this.i18n.t('hideAllSections')\n    : this.i18n.t('showAllSections');\n\n  this.$showAllButton.setAttribute('aria-expanded', expanded.toString());\n  this.$showAllText.innerText = newButtonText;\n\n  // Swap icon, toggle class\n  if (expanded) {\n    this.$showAllIcon.classList.remove(this.downChevronIconClass);\n  } else {\n    this.$showAllIcon.classList.add(this.downChevronIconClass);\n  }\n};\n\nvar helper = {\n  /**\n   * Check for `window.sessionStorage`, and that it actually works.\n   *\n   * @returns {boolean} True if session storage is available\n   */\n  checkForSessionStorage: function () {\n    var testString = 'this is the test string';\n    var result;\n    try {\n      window.sessionStorage.setItem(testString, testString);\n      result = window.sessionStorage.getItem(testString) === testString.toString();\n      window.sessionStorage.removeItem(testString);\n      return result\n    } catch (exception) {\n      return false\n    }\n  }\n};\n\n/**\n * Set the state of the accordions in sessionStorage\n *\n * @deprecated Will be made private in v5.0\n * @param {Element} $section - Section element\n */\nAccordion.prototype.storeState = function ($section) {\n  if (this.browserSupportsSessionStorage && this.config.rememberExpanded) {\n    // We need a unique way of identifying each content in the Accordion. Since\n    // an `#id` should be unique and an `id` is required for `aria-` attributes\n    // `id` can be safely used.\n    var $button = $section.querySelector('.' + this.sectionButtonClass);\n\n    if ($button) {\n      var contentId = $button.getAttribute('aria-controls');\n      var contentState = $button.getAttribute('aria-expanded');\n\n      // Only set the state when both `contentId` and `contentState` are taken from the DOM.\n      if (contentId && contentState) {\n        window.sessionStorage.setItem(contentId, contentState);\n      }\n    }\n  }\n};\n\n/**\n * Read the state of the accordions from sessionStorage\n *\n * @deprecated Will be made private in v5.0\n * @param {Element} $section - Section element\n */\nAccordion.prototype.setInitialState = function ($section) {\n  if (this.browserSupportsSessionStorage && this.config.rememberExpanded) {\n    var $button = $section.querySelector('.' + this.sectionButtonClass);\n\n    if ($button) {\n      var contentId = $button.getAttribute('aria-controls');\n      var contentState = contentId ? window.sessionStorage.getItem(contentId) : null;\n\n      if (contentState !== null) {\n        this.setExpanded(contentState === 'true', $section);\n      }\n    }\n  }\n};\n\n/**\n * Create an element to improve semantics of the section button with punctuation\n *\n * Adding punctuation to the button can also improve its general semantics by dividing its contents\n * into thematic chunks.\n * See https://github.com/alphagov/govuk-frontend/issues/2327#issuecomment-922957442\n *\n * @deprecated Will be made private in v5.0\n * @returns {Element} DOM element\n */\nAccordion.prototype.getButtonPunctuationEl = function () {\n  var $punctuationEl = document.createElement('span');\n  $punctuationEl.classList.add('govuk-visually-hidden', this.sectionHeadingDividerClass);\n  $punctuationEl.innerHTML = ', ';\n  return $punctuationEl\n};\n\n/**\n * Accordion config\n *\n * @typedef {object} AccordionConfig\n * @property {AccordionTranslations} [i18n = ACCORDION_TRANSLATIONS] - See constant {@link ACCORDION_TRANSLATIONS}\n * @property {boolean} [rememberExpanded] - Whether the expanded and collapsed\n *   state of each section is remembered and restored when navigating.\n */\n\n/**\n * Accordion translations\n *\n * @typedef {object} AccordionTranslations\n *\n * Messages used by the component for the labels of its buttons. This includes\n * the visible text shown on screen, and text to help assistive technology users\n * for the buttons toggling each section.\n * @property {string} [hideAllSections] - The text content for the 'Hide all\n *   sections' button, used when at least one section is expanded.\n * @property {string} [hideSection] - The text content for the 'Hide'\n *   button, used when a section is expanded.\n * @property {string} [hideSectionAriaLabel] - The text content appended to the\n *   'Hide' button's accessible name when a section is expanded.\n * @property {string} [showAllSections] - The text content for the 'Show all\n *   sections' button, used when all sections are collapsed.\n * @property {string} [showSection] - The text content for the 'Show'\n *   button, used when a section is collapsed.\n * @property {string} [showSectionAriaLabel] - The text content appended to the\n *   'Show' button's accessible name when a section is expanded.\n */\n\nexport default Accordion;\n//# sourceMappingURL=components/accordion/accordion.mjs.map\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,YAAY,EAAEC,wBAAwB,QAAQ,wBAAwB;AAChG,SAASC,gBAAgB,QAAQ,oCAAoC;AACrE,SAASC,IAAI,QAAQ,gBAAgB;AACrC,OAAO,wDAAwD;AAC/D,OAAO,sDAAsD;AAC7D,OAAO,kCAAkC;AACzC,OAAO,oDAAoD;AAC3D,OAAO,kDAAkD;;AAEzD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,sBAAsB,GAAG;EAC3BC,eAAe,EAAE,mBAAmB;EACpCC,WAAW,EAAE,MAAM;EACnBC,oBAAoB,EAAE,mBAAmB;EACzCC,eAAe,EAAE,mBAAmB;EACpCC,WAAW,EAAE,MAAM;EACnBC,oBAAoB,EAAE;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAASA,CAAEC,OAAO,EAAEC,MAAM,EAAE;EACnC,IAAI,EAAED,OAAO,YAAYE,WAAW,CAAC,EAAE;IACrC,OAAO,IAAI;EACb;;EAEA;EACA,IAAI,CAACF,OAAO,GAAGA,OAAO;EAEtB,IAAIG,aAAa,GAAG;IAClBC,IAAI,EAAEZ,sBAAsB;IAC5Ba,gBAAgB,EAAE;EACpB,CAAC;;EAED;AACF;AACA;AACA;EACE,IAAI,CAACJ,MAAM,GAAGb,YAAY,CACxBe,aAAa,EACbF,MAAM,IAAI,CAAC,CAAC,EACZX,gBAAgB,CAACU,OAAO,CAACM,OAAO,CAAC,CAClC;;EAED;EACA,IAAI,CAACF,IAAI,GAAG,IAAIb,IAAI,CAACF,wBAAwB,CAAC,IAAI,CAACY,MAAM,EAAE,MAAM,CAAC,CAAC;;EAEnE;EACA,IAAI,CAACM,aAAa,GAAG,2BAA2B;;EAEhD;EACA,IAAI,CAACC,YAAY,GAAG,2BAA2B;;EAE/C;EACA,IAAI,CAACC,gBAAgB,GAAG,gCAAgC;;EAExD;EACA,IAAI,CAACC,YAAY,GAAG,0BAA0B;;EAE9C;EACA,IAAI,CAACC,oBAAoB,GAAG,oCAAoC;;EAEhE;EACA,IAAI,CAACC,kBAAkB,GAAG,iCAAiC;;EAE3D;EACA,IAAI,CAACC,kBAAkB,GAAG,iCAAiC;;EAE3D;EACA,IAAI,CAACC,mBAAmB,GAAG,kCAAkC;;EAE7D;EACA,IAAI,CAACC,0BAA0B,GAAG,0CAA0C;;EAE5E;EACA,IAAI,CAACC,uBAAuB,GAAG,uCAAuC;;EAEtE;EACA,IAAI,CAACC,4BAA4B,GAAG,6CAA6C;;EAEjF;EACA,IAAI,CAACC,0BAA0B,GAAG,iCAAiC;;EAEnE;EACA,IAAI,CAACC,+BAA+B,GAAG,uCAAuC;;EAE9E;EACA,IAAI,CAACC,wBAAwB,GAAG,sCAAsC;;EAEtE;EACA,IAAI,CAACC,kBAAkB,GAAG,8BAA8B;;EAExD;EACA,IAAI,CAACC,oBAAoB,GAAG,oCAAoC;;EAEhE;EACA,IAAI,CAACC,mBAAmB,GAAG,kCAAkC;;EAE7D;EACA,IAAI,CAACC,wBAAwB,GAAG,wCAAwC;;EAExE;EACA,IAAI,CAACC,mBAAmB,GAAG,kCAAkC;EAE7D,IAAIC,SAAS,GAAG,IAAI,CAAC1B,OAAO,CAAC2B,gBAAgB,CAAC,GAAG,GAAG,IAAI,CAACjB,YAAY,CAAC;EACtE,IAAI,CAACgB,SAAS,CAACE,MAAM,EAAE;IACrB,OAAO,IAAI;EACb;;EAEA;EACA,IAAI,CAACF,SAAS,GAAGA,SAAS;;EAE1B;EACA,IAAI,CAACG,6BAA6B,GAAGC,MAAM,CAACC,sBAAsB,EAAE;;EAEpE;EACA,IAAI,CAACC,cAAc,GAAG,IAAI;;EAE1B;EACA,IAAI,CAACC,YAAY,GAAG,IAAI;;EAExB;EACA,IAAI,CAACC,YAAY,GAAG,IAAI;AAC1B;;AAEA;AACA;AACA;AACAnC,SAAS,CAACoC,SAAS,CAACC,IAAI,GAAG,YAAY;EACrC;EACA,IAAI,CAAC,IAAI,CAACpC,OAAO,IAAI,CAAC,IAAI,CAAC0B,SAAS,EAAE;IACpC;EACF;EAEA,IAAI,CAACW,YAAY,EAAE;EACnB,IAAI,CAACC,kBAAkB,EAAE;;EAEzB;EACA,IAAIC,kBAAkB,GAAG,IAAI,CAACC,sBAAsB,EAAE;EACtD,IAAI,CAACC,mBAAmB,CAACF,kBAAkB,CAAC;AAC9C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAxC,SAAS,CAACoC,SAAS,CAACE,YAAY,GAAG,YAAY;EAC7C;EACA,IAAI,CAACL,cAAc,GAAGU,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;EACtD,IAAI,CAACX,cAAc,CAACY,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC;EAClD,IAAI,CAACZ,cAAc,CAACY,YAAY,CAAC,OAAO,EAAE,IAAI,CAACpC,YAAY,CAAC;EAC5D,IAAI,CAACwB,cAAc,CAACY,YAAY,CAAC,eAAe,EAAE,OAAO,CAAC;;EAE1D;EACA,IAAI,CAACX,YAAY,GAAGS,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;EAClD,IAAI,CAACV,YAAY,CAACY,SAAS,CAACC,GAAG,CAAC,IAAI,CAACzB,kBAAkB,CAAC;EACxD,IAAI,CAACW,cAAc,CAACe,WAAW,CAAC,IAAI,CAACd,YAAY,CAAC;;EAElD;EACA,IAAIe,kBAAkB,GAAGN,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;EACtDK,kBAAkB,CAACJ,YAAY,CAAC,OAAO,EAAE,IAAI,CAACrC,aAAa,CAAC;EAC5DyC,kBAAkB,CAACD,WAAW,CAAC,IAAI,CAACf,cAAc,CAAC;EACnD,IAAI,CAAChC,OAAO,CAACiD,YAAY,CAACD,kBAAkB,EAAE,IAAI,CAAChD,OAAO,CAACkD,UAAU,CAAC;;EAEtE;EACA,IAAI,CAAChB,YAAY,GAAGQ,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;EAClD,IAAI,CAACT,YAAY,CAACW,SAAS,CAACC,GAAG,CAAC,IAAI,CAACrC,gBAAgB,CAAC;EACtD,IAAI,CAACuB,cAAc,CAACe,WAAW,CAAC,IAAI,CAACb,YAAY,CAAC;;EAElD;EACA,IAAI,CAACF,cAAc,CAACmB,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAACC,qBAAqB,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;;EAEpF;EACA,IAAI,eAAe,IAAIX,QAAQ,EAAE;IAC/BA,QAAQ,CAACS,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAACG,aAAa,CAACD,IAAI,CAAC,IAAI,CAAC,CAAC;EACzE;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAtD,SAAS,CAACoC,SAAS,CAACG,kBAAkB,GAAG,YAAY;EACnD,IAAIiB,UAAU,GAAG,IAAI;EACrB,IAAI7B,SAAS,GAAG,IAAI,CAACA,SAAS;;EAE9B;EACAvC,eAAe,CAACuC,SAAS,EAAE,UAAU8B,QAAQ,EAAEC,CAAC,EAAE;IAChD,IAAIC,OAAO,GAAGF,QAAQ,CAACG,aAAa,CAAC,GAAG,GAAGJ,UAAU,CAAC1C,kBAAkB,CAAC;IACzE,IAAI,CAAC6C,OAAO,EAAE;MACZ;IACF;;IAEA;IACAH,UAAU,CAACK,qBAAqB,CAACF,OAAO,EAAED,CAAC,CAAC;IAC5CF,UAAU,CAACM,WAAW,CAACN,UAAU,CAACO,UAAU,CAACN,QAAQ,CAAC,EAAEA,QAAQ,CAAC;;IAEjE;IACAE,OAAO,CAACP,gBAAgB,CAAC,OAAO,EAAEI,UAAU,CAACQ,eAAe,CAACV,IAAI,CAACE,UAAU,EAAEC,QAAQ,CAAC,CAAC;;IAExF;IACA;IACAD,UAAU,CAACS,eAAe,CAACR,QAAQ,CAAC;EACtC,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAzD,SAAS,CAACoC,SAAS,CAACyB,qBAAqB,GAAG,UAAUF,OAAO,EAAEO,KAAK,EAAE;EACpE,IAAIC,KAAK,GAAGR,OAAO,CAACC,aAAa,CAAC,GAAG,GAAG,IAAI,CAAC/C,kBAAkB,CAAC;EAChE,IAAIuD,QAAQ,GAAGT,OAAO,CAACC,aAAa,CAAC,GAAG,GAAG,IAAI,CAAC7C,mBAAmB,CAAC;EACpE,IAAIsD,QAAQ,GAAGV,OAAO,CAACC,aAAa,CAAC,GAAG,GAAG,IAAI,CAACpC,mBAAmB,CAAC;EAEpE,IAAI,CAAC2C,KAAK,IAAI,CAACC,QAAQ,EAAE;IACvB;EACF;;EAEA;EACA,IAAIE,OAAO,GAAG3B,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;EAC9C0B,OAAO,CAACzB,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC;EACtCyB,OAAO,CAACzB,YAAY,CAAC,eAAe,EAAE,IAAI,CAAC5C,OAAO,CAACsE,EAAE,GAAG,WAAW,GAAG,CAACL,KAAK,GAAG,CAAC,EAAEM,QAAQ,EAAE,CAAC;;EAE7F;EACA,KAAK,IAAId,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,KAAK,CAACM,UAAU,CAAC5C,MAAM,EAAE6B,CAAC,EAAE,EAAE;IAChD,IAAIgB,IAAI,GAAGP,KAAK,CAACM,UAAU,CAACE,IAAI,CAACjB,CAAC,CAAC;IACnC;IACA;IACA,IAAIgB,IAAI,CAACE,QAAQ,KAAK,IAAI,EAAE;MAC1BN,OAAO,CAACzB,YAAY,CAAC6B,IAAI,CAACE,QAAQ,EAAEF,IAAI,CAACG,SAAS,CAAC;IACrD;EACF;;EAEA;EACA,IAAIC,YAAY,GAAGnC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;EACjDkC,YAAY,CAAChC,SAAS,CAACC,GAAG,CAAC,IAAI,CAAC9B,uBAAuB,CAAC;EACxD;EACA;EACA6D,YAAY,CAACP,EAAE,GAAGJ,KAAK,CAACI,EAAE;;EAE1B;EACA,IAAIQ,iBAAiB,GAAGpC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;EACtDmC,iBAAiB,CAACjC,SAAS,CAACC,GAAG,CAAC,IAAI,CAAC7B,4BAA4B,CAAC;EAClE4D,YAAY,CAAC9B,WAAW,CAAC+B,iBAAiB,CAAC;EAC3C;EACAA,iBAAiB,CAACC,SAAS,GAAGb,KAAK,CAACa,SAAS;;EAE7C;EACA,IAAIC,eAAe,GAAGtC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;EACpDqC,eAAe,CAACnC,SAAS,CAACC,GAAG,CAAC,IAAI,CAAC5B,0BAA0B,CAAC;EAC9D;EACA;EACA;EACA8D,eAAe,CAACpC,YAAY,CAAC,gBAAgB,EAAE,EAAE,CAAC;EAClD;EACA,IAAIqC,oBAAoB,GAAGvC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;EACzDsC,oBAAoB,CAACpC,SAAS,CAACC,GAAG,CAAC,IAAI,CAAC3B,+BAA+B,CAAC;EACxE6D,eAAe,CAACjC,WAAW,CAACkC,oBAAoB,CAAC;EACjD;EACA,IAAIC,aAAa,GAAGxC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;EAClD,IAAIwC,aAAa,GAAGzC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;EAClDwC,aAAa,CAACtC,SAAS,CAACC,GAAG,CAAC,IAAI,CAACzB,kBAAkB,CAAC;EACpD4D,oBAAoB,CAAClC,WAAW,CAACoC,aAAa,CAAC;EAC/CD,aAAa,CAACrC,SAAS,CAACC,GAAG,CAAC,IAAI,CAAC1B,wBAAwB,CAAC;EAC1D6D,oBAAoB,CAAClC,WAAW,CAACmC,aAAa,CAAC;;EAE/C;EACA;EACA;EACA;EACA;EACAb,OAAO,CAACtB,WAAW,CAAC8B,YAAY,CAAC;EACjCR,OAAO,CAACtB,WAAW,CAAC,IAAI,CAACqC,sBAAsB,EAAE,CAAC;;EAElD;EACA,IAAIhB,QAAQ,EAAE;IACZ;IACA;IACA;IACA;IACA,IAAIiB,YAAY,GAAG3C,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;IACjD;IACA,IAAI2C,iBAAiB,GAAG5C,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;IACtD2C,iBAAiB,CAACzC,SAAS,CAACC,GAAG,CAAC,IAAI,CAACtB,wBAAwB,CAAC;IAC9D6D,YAAY,CAACtC,WAAW,CAACuC,iBAAiB,CAAC;;IAE3C;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGpB,QAAQ,CAACI,UAAU,CAAC5C,MAAM,EAAE2D,CAAC,GAAGC,CAAC,EAAE,EAAED,CAAC,EAAE;MAC1D,IAAIZ,QAAQ,GAAGP,QAAQ,CAACI,UAAU,CAACE,IAAI,CAACa,CAAC,CAAC,CAACZ,QAAQ;MACnD,IAAIC,SAAS,GAAGR,QAAQ,CAACI,UAAU,CAACE,IAAI,CAACa,CAAC,CAAC,CAACX,SAAS;MACrDS,YAAY,CAACzC,YAAY,CAAC+B,QAAQ,EAAEC,SAAS,CAAC;IAChD;;IAEA;IACAU,iBAAiB,CAACP,SAAS,GAAGX,QAAQ,CAACW,SAAS;;IAEhD;IACAX,QAAQ,CAACqB,UAAU,CAACC,YAAY,CAACL,YAAY,EAAEjB,QAAQ,CAAC;IAExDC,OAAO,CAACtB,WAAW,CAACsC,YAAY,CAAC;IACjChB,OAAO,CAACtB,WAAW,CAAC,IAAI,CAACqC,sBAAsB,EAAE,CAAC;EACpD;EAEAf,OAAO,CAACtB,WAAW,CAACiC,eAAe,CAAC;EAEpCb,QAAQ,CAACwB,WAAW,CAACzB,KAAK,CAAC;EAC3BC,QAAQ,CAACpB,WAAW,CAACsB,OAAO,CAAC;AAC/B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAtE,SAAS,CAACoC,SAAS,CAACmB,aAAa,GAAG,UAAUsC,KAAK,EAAE;EACnD,IAAIC,SAAS,GAAGD,KAAK,CAACE,MAAM;;EAE5B;EACA,IAAI,EAAED,SAAS,YAAYE,OAAO,CAAC,EAAE;IACnC;EACF;;EAEA;EACA,IAAIvC,QAAQ,GAAGqC,SAAS,CAACG,OAAO,CAAC,GAAG,GAAG,IAAI,CAACtF,YAAY,CAAC;EACzD,IAAI8C,QAAQ,EAAE;IACZ,IAAI,CAACK,WAAW,CAAC,IAAI,EAAEL,QAAQ,CAAC;EAClC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAzD,SAAS,CAACoC,SAAS,CAAC4B,eAAe,GAAG,UAAUP,QAAQ,EAAE;EACxD,IAAIyC,QAAQ,GAAG,IAAI,CAACnC,UAAU,CAACN,QAAQ,CAAC;EACxC,IAAI,CAACK,WAAW,CAAC,CAACoC,QAAQ,EAAEzC,QAAQ,CAAC;;EAErC;EACA,IAAI,CAAC0C,UAAU,CAAC1C,QAAQ,CAAC;AAC3B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAzD,SAAS,CAACoC,SAAS,CAACiB,qBAAqB,GAAG,YAAY;EACtD,IAAIG,UAAU,GAAG,IAAI;EACrB,IAAI7B,SAAS,GAAG,IAAI,CAACA,SAAS;EAE9B,IAAIyE,WAAW,GAAG,CAAC,IAAI,CAAC3D,sBAAsB,EAAE;;EAEhD;EACArD,eAAe,CAACuC,SAAS,EAAE,UAAU8B,QAAQ,EAAE;IAC7CD,UAAU,CAACM,WAAW,CAACsC,WAAW,EAAE3C,QAAQ,CAAC;IAC7C;IACAD,UAAU,CAAC2C,UAAU,CAAC1C,QAAQ,CAAC;EACjC,CAAC,CAAC;EAEFD,UAAU,CAACd,mBAAmB,CAAC0D,WAAW,CAAC;AAC7C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACApG,SAAS,CAACoC,SAAS,CAAC0B,WAAW,GAAG,UAAUoC,QAAQ,EAAEzC,QAAQ,EAAE;EAC9D,IAAI2B,aAAa,GAAG3B,QAAQ,CAACG,aAAa,CAAC,GAAG,GAAG,IAAI,CAACtC,kBAAkB,CAAC;EACzE,IAAI6D,aAAa,GAAG1B,QAAQ,CAACG,aAAa,CAAC,GAAG,GAAG,IAAI,CAACvC,wBAAwB,CAAC;EAC/E,IAAIiD,OAAO,GAAGb,QAAQ,CAACG,aAAa,CAAC,GAAG,GAAG,IAAI,CAAC/C,kBAAkB,CAAC;EACnE,IAAIwF,QAAQ,GAAG5C,QAAQ,CAACG,aAAa,CAAC,GAAG,GAAG,IAAI,CAAClC,mBAAmB,CAAC;EAErE,IAAI,CAAC0D,aAAa,IAChB,EAAED,aAAa,YAAYhF,WAAW,CAAC,IACvC,CAACmE,OAAO,IACR,CAAC+B,QAAQ,EAAE;IACX;EACF;EAEA,IAAIC,aAAa,GAAGJ,QAAQ,GACxB,IAAI,CAAC7F,IAAI,CAACkG,CAAC,CAAC,aAAa,CAAC,GAC1B,IAAI,CAAClG,IAAI,CAACkG,CAAC,CAAC,aAAa,CAAC;EAE9BpB,aAAa,CAACqB,SAAS,GAAGF,aAAa;EACvChC,OAAO,CAACzB,YAAY,CAAC,eAAe,EAAEqD,QAAQ,CAAC1B,QAAQ,EAAE,CAAC;;EAE1D;EACA,IAAIiC,cAAc,GAAG,EAAE;EAEvB,IAAI3B,YAAY,GAAGrB,QAAQ,CAACG,aAAa,CAAC,GAAG,GAAG,IAAI,CAAC3C,uBAAuB,CAAC;EAC7E,IAAI6D,YAAY,YAAY3E,WAAW,EAAE;IACvCsG,cAAc,CAACC,IAAI,CAAC5B,YAAY,CAAC0B,SAAS,CAACG,IAAI,EAAE,CAAC;EACpD;EAEA,IAAItC,QAAQ,GAAGZ,QAAQ,CAACG,aAAa,CAAC,GAAG,GAAG,IAAI,CAACpC,mBAAmB,CAAC;EACrE,IAAI6C,QAAQ,YAAYlE,WAAW,EAAE;IACnCsG,cAAc,CAACC,IAAI,CAACrC,QAAQ,CAACmC,SAAS,CAACG,IAAI,EAAE,CAAC;EAChD;EAEA,IAAIC,gBAAgB,GAAGV,QAAQ,GAC3B,IAAI,CAAC7F,IAAI,CAACkG,CAAC,CAAC,sBAAsB,CAAC,GACnC,IAAI,CAAClG,IAAI,CAACkG,CAAC,CAAC,sBAAsB,CAAC;EACvCE,cAAc,CAACC,IAAI,CAACE,gBAAgB,CAAC;;EAErC;AACF;AACA;AACA;AACA;EACEtC,OAAO,CAACzB,YAAY,CAAC,YAAY,EAAE4D,cAAc,CAACI,IAAI,CAAC,KAAK,CAAC,CAAC;;EAE9D;EACA,IAAIX,QAAQ,EAAE;IACZG,QAAQ,CAACS,eAAe,CAAC,QAAQ,CAAC;IAClCrD,QAAQ,CAACX,SAAS,CAACC,GAAG,CAAC,IAAI,CAACnC,oBAAoB,CAAC;IACjDwE,aAAa,CAACtC,SAAS,CAACiE,MAAM,CAAC,IAAI,CAACxF,oBAAoB,CAAC;EAC3D,CAAC,MAAM;IACL8E,QAAQ,CAACxD,YAAY,CAAC,QAAQ,EAAE,aAAa,CAAC;IAC9CY,QAAQ,CAACX,SAAS,CAACiE,MAAM,CAAC,IAAI,CAACnG,oBAAoB,CAAC;IACpDwE,aAAa,CAACtC,SAAS,CAACC,GAAG,CAAC,IAAI,CAACxB,oBAAoB,CAAC;EACxD;;EAEA;EACA,IAAIiB,kBAAkB,GAAG,IAAI,CAACC,sBAAsB,EAAE;EACtD,IAAI,CAACC,mBAAmB,CAACF,kBAAkB,CAAC;AAC9C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAxC,SAAS,CAACoC,SAAS,CAAC2B,UAAU,GAAG,UAAUN,QAAQ,EAAE;EACnD,OAAOA,QAAQ,CAACX,SAAS,CAACkE,QAAQ,CAAC,IAAI,CAACpG,oBAAoB,CAAC;AAC/D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAZ,SAAS,CAACoC,SAAS,CAACK,sBAAsB,GAAG,YAAY;EACvD;EACA,IAAIwE,aAAa,GAAG,IAAI,CAACtF,SAAS,CAACE,MAAM;EACzC;EACA,IAAIqF,oBAAoB,GAAG,IAAI,CAACjH,OAAO,CAAC2B,gBAAgB,CAAC,GAAG,GAAG,IAAI,CAAChB,oBAAoB,CAAC,CAACiB,MAAM;EAChG,IAAIW,kBAAkB,GAAGyE,aAAa,KAAKC,oBAAoB;EAE/D,OAAO1E,kBAAkB;AAC3B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAxC,SAAS,CAACoC,SAAS,CAACM,mBAAmB,GAAG,UAAUwD,QAAQ,EAAE;EAC5D,IAAII,aAAa,GAAGJ,QAAQ,GACxB,IAAI,CAAC7F,IAAI,CAACkG,CAAC,CAAC,iBAAiB,CAAC,GAC9B,IAAI,CAAClG,IAAI,CAACkG,CAAC,CAAC,iBAAiB,CAAC;EAElC,IAAI,CAACtE,cAAc,CAACY,YAAY,CAAC,eAAe,EAAEqD,QAAQ,CAAC1B,QAAQ,EAAE,CAAC;EACtE,IAAI,CAACrC,YAAY,CAACqE,SAAS,GAAGF,aAAa;;EAE3C;EACA,IAAIJ,QAAQ,EAAE;IACZ,IAAI,CAAChE,YAAY,CAACY,SAAS,CAACiE,MAAM,CAAC,IAAI,CAACxF,oBAAoB,CAAC;EAC/D,CAAC,MAAM;IACL,IAAI,CAACW,YAAY,CAACY,SAAS,CAACC,GAAG,CAAC,IAAI,CAACxB,oBAAoB,CAAC;EAC5D;AACF,CAAC;AAED,IAAIQ,MAAM,GAAG;EACX;AACF;AACA;AACA;AACA;EACEC,sBAAsB,EAAE,SAAAA,CAAA,EAAY;IAClC,IAAImF,UAAU,GAAG,yBAAyB;IAC1C,IAAIC,MAAM;IACV,IAAI;MACFC,MAAM,CAACC,cAAc,CAACC,OAAO,CAACJ,UAAU,EAAEA,UAAU,CAAC;MACrDC,MAAM,GAAGC,MAAM,CAACC,cAAc,CAACE,OAAO,CAACL,UAAU,CAAC,KAAKA,UAAU,CAAC3C,QAAQ,EAAE;MAC5E6C,MAAM,CAACC,cAAc,CAACG,UAAU,CAACN,UAAU,CAAC;MAC5C,OAAOC,MAAM;IACf,CAAC,CAAC,OAAOM,SAAS,EAAE;MAClB,OAAO,KAAK;IACd;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA1H,SAAS,CAACoC,SAAS,CAAC+D,UAAU,GAAG,UAAU1C,QAAQ,EAAE;EACnD,IAAI,IAAI,CAAC3B,6BAA6B,IAAI,IAAI,CAAC5B,MAAM,CAACI,gBAAgB,EAAE;IACtE;IACA;IACA;IACA,IAAIgE,OAAO,GAAGb,QAAQ,CAACG,aAAa,CAAC,GAAG,GAAG,IAAI,CAAC/C,kBAAkB,CAAC;IAEnE,IAAIyD,OAAO,EAAE;MACX,IAAIqD,SAAS,GAAGrD,OAAO,CAACsD,YAAY,CAAC,eAAe,CAAC;MACrD,IAAIC,YAAY,GAAGvD,OAAO,CAACsD,YAAY,CAAC,eAAe,CAAC;;MAExD;MACA,IAAID,SAAS,IAAIE,YAAY,EAAE;QAC7BR,MAAM,CAACC,cAAc,CAACC,OAAO,CAACI,SAAS,EAAEE,YAAY,CAAC;MACxD;IACF;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA7H,SAAS,CAACoC,SAAS,CAAC6B,eAAe,GAAG,UAAUR,QAAQ,EAAE;EACxD,IAAI,IAAI,CAAC3B,6BAA6B,IAAI,IAAI,CAAC5B,MAAM,CAACI,gBAAgB,EAAE;IACtE,IAAIgE,OAAO,GAAGb,QAAQ,CAACG,aAAa,CAAC,GAAG,GAAG,IAAI,CAAC/C,kBAAkB,CAAC;IAEnE,IAAIyD,OAAO,EAAE;MACX,IAAIqD,SAAS,GAAGrD,OAAO,CAACsD,YAAY,CAAC,eAAe,CAAC;MACrD,IAAIC,YAAY,GAAGF,SAAS,GAAGN,MAAM,CAACC,cAAc,CAACE,OAAO,CAACG,SAAS,CAAC,GAAG,IAAI;MAE9E,IAAIE,YAAY,KAAK,IAAI,EAAE;QACzB,IAAI,CAAC/D,WAAW,CAAC+D,YAAY,KAAK,MAAM,EAAEpE,QAAQ,CAAC;MACrD;IACF;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAzD,SAAS,CAACoC,SAAS,CAACiD,sBAAsB,GAAG,YAAY;EACvD,IAAIyC,cAAc,GAAGnF,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;EACnDkF,cAAc,CAAChF,SAAS,CAACC,GAAG,CAAC,uBAAuB,EAAE,IAAI,CAAC/B,0BAA0B,CAAC;EACtF8G,cAAc,CAAC9C,SAAS,GAAG,IAAI;EAC/B,OAAO8C,cAAc;AACvB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe9H,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}