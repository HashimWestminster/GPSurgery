{"ast":null,"code":"import { nodeListForEach } from '../../common/index.mjs';\nimport '../../vendor/polyfills/Element/prototype/classList.mjs';\nimport '../../vendor/polyfills/Event.mjs';\nimport '../../vendor/polyfills/Function/prototype/bind.mjs';\n\n/* eslint-disable es-x/no-function-prototype-bind -- Polyfill imported */\n\n/**\n * Checkboxes component\n *\n * @class\n * @param {Element} $module - HTML element to use for checkboxes\n */\nfunction Checkboxes($module) {\n  if (!($module instanceof HTMLElement)) {\n    return this;\n  }\n  var $inputs = $module.querySelectorAll('input[type=\"checkbox\"]');\n  if (!$inputs.length) {\n    return this;\n  }\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$module = $module;\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$inputs = $inputs;\n}\n\n/**\n * Initialise component\n *\n * Checkboxes can be associated with a 'conditionally revealed' content block –\n * for example, a checkbox for 'Phone' could reveal an additional form field for\n * the user to enter their phone number.\n *\n * These associations are made using a `data-aria-controls` attribute, which is\n * promoted to an aria-controls attribute during initialisation.\n *\n * We also need to restore the state of any conditional reveals on the page (for\n * example if the user has navigated back), and set up event handlers to keep\n * the reveal in sync with the checkbox state.\n */\nCheckboxes.prototype.init = function () {\n  // Check that required elements are present\n  if (!this.$module || !this.$inputs) {\n    return;\n  }\n  var $module = this.$module;\n  var $inputs = this.$inputs;\n  nodeListForEach($inputs, function ($input) {\n    var targetId = $input.getAttribute('data-aria-controls');\n\n    // Skip checkboxes without data-aria-controls attributes, or where the\n    // target element does not exist.\n    if (!targetId || !document.getElementById(targetId)) {\n      return;\n    }\n\n    // Promote the data-aria-controls attribute to a aria-controls attribute\n    // so that the relationship is exposed in the AOM\n    $input.setAttribute('aria-controls', targetId);\n    $input.removeAttribute('data-aria-controls');\n  });\n\n  // When the page is restored after navigating 'back' in some browsers the\n  // state of form controls is not restored until *after* the DOMContentLoaded\n  // event is fired, so we need to sync after the pageshow event in browsers\n  // that support it.\n  window.addEventListener('onpageshow' in window ? 'pageshow' : 'DOMContentLoaded', this.syncAllConditionalReveals.bind(this));\n\n  // Although we've set up handlers to sync state on the pageshow or\n  // DOMContentLoaded event, init could be called after those events have fired,\n  // for example if they are added to the page dynamically, so sync now too.\n  this.syncAllConditionalReveals();\n\n  // Handle events\n  $module.addEventListener('click', this.handleClick.bind(this));\n};\n\n/**\n * Sync the conditional reveal states for all checkboxes in this $module.\n *\n * @deprecated Will be made private in v5.0\n */\nCheckboxes.prototype.syncAllConditionalReveals = function () {\n  nodeListForEach(this.$inputs, this.syncConditionalRevealWithInputState.bind(this));\n};\n\n/**\n * Sync conditional reveal with the input state\n *\n * Synchronise the visibility of the conditional reveal, and its accessible\n * state, with the input's checked state.\n *\n * @deprecated Will be made private in v5.0\n * @param {HTMLInputElement} $input - Checkbox input\n */\nCheckboxes.prototype.syncConditionalRevealWithInputState = function ($input) {\n  var targetId = $input.getAttribute('aria-controls');\n  if (!targetId) {\n    return;\n  }\n  var $target = document.getElementById(targetId);\n  if ($target && $target.classList.contains('govuk-checkboxes__conditional')) {\n    var inputIsChecked = $input.checked;\n    $input.setAttribute('aria-expanded', inputIsChecked.toString());\n    $target.classList.toggle('govuk-checkboxes__conditional--hidden', !inputIsChecked);\n  }\n};\n\n/**\n * Uncheck other checkboxes\n *\n * Find any other checkbox inputs with the same name value, and uncheck them.\n * This is useful for when a “None of these\" checkbox is checked.\n *\n * @deprecated Will be made private in v5.0\n * @param {HTMLInputElement} $input - Checkbox input\n */\nCheckboxes.prototype.unCheckAllInputsExcept = function ($input) {\n  var $component = this;\n\n  /** @type {NodeListOf<HTMLInputElement>} */\n  // @ts-expect-error `NodeListOf<HTMLInputElement>` type expected\n  var allInputsWithSameName = document.querySelectorAll('input[type=\"checkbox\"][name=\"' + $input.name + '\"]');\n  nodeListForEach(allInputsWithSameName, function ($inputWithSameName) {\n    var hasSameFormOwner = $input.form === $inputWithSameName.form;\n    if (hasSameFormOwner && $inputWithSameName !== $input) {\n      $inputWithSameName.checked = false;\n      $component.syncConditionalRevealWithInputState($inputWithSameName);\n    }\n  });\n};\n\n/**\n * Uncheck exclusive checkboxes\n *\n * Find any checkbox inputs with the same name value and the 'exclusive' behaviour,\n * and uncheck them. This helps prevent someone checking both a regular checkbox and a\n * \"None of these\" checkbox in the same fieldset.\n *\n * @deprecated Will be made private in v5.0\n * @param {HTMLInputElement} $input - Checkbox input\n */\nCheckboxes.prototype.unCheckExclusiveInputs = function ($input) {\n  var $component = this;\n\n  /** @type {NodeListOf<HTMLInputElement>} */\n  // @ts-expect-error `NodeListOf<HTMLInputElement>` type expected\n  var allInputsWithSameNameAndExclusiveBehaviour = document.querySelectorAll('input[data-behaviour=\"exclusive\"][type=\"checkbox\"][name=\"' + $input.name + '\"]');\n  nodeListForEach(allInputsWithSameNameAndExclusiveBehaviour, function ($exclusiveInput) {\n    var hasSameFormOwner = $input.form === $exclusiveInput.form;\n    if (hasSameFormOwner) {\n      $exclusiveInput.checked = false;\n      $component.syncConditionalRevealWithInputState($exclusiveInput);\n    }\n  });\n};\n\n/**\n * Click event handler\n *\n * Handle a click within the $module – if the click occurred on a checkbox, sync\n * the state of any associated conditional reveal with the checkbox state.\n *\n * @deprecated Will be made private in v5.0\n * @param {MouseEvent} event - Click event\n */\nCheckboxes.prototype.handleClick = function (event) {\n  var $clickedInput = event.target;\n\n  // Ignore clicks on things that aren't checkbox inputs\n  if (!($clickedInput instanceof HTMLInputElement) || $clickedInput.type !== 'checkbox') {\n    return;\n  }\n\n  // If the checkbox conditionally-reveals some content, sync the state\n  var hasAriaControls = $clickedInput.getAttribute('aria-controls');\n  if (hasAriaControls) {\n    this.syncConditionalRevealWithInputState($clickedInput);\n  }\n\n  // No further behaviour needed for unchecking\n  if (!$clickedInput.checked) {\n    return;\n  }\n\n  // Handle 'exclusive' checkbox behaviour (ie \"None of these\")\n  var hasBehaviourExclusive = $clickedInput.getAttribute('data-behaviour') === 'exclusive';\n  if (hasBehaviourExclusive) {\n    this.unCheckAllInputsExcept($clickedInput);\n  } else {\n    this.unCheckExclusiveInputs($clickedInput);\n  }\n};\nexport default Checkboxes;","map":{"version":3,"names":["nodeListForEach","Checkboxes","$module","HTMLElement","$inputs","querySelectorAll","length","prototype","init","$input","targetId","getAttribute","document","getElementById","setAttribute","removeAttribute","window","addEventListener","syncAllConditionalReveals","bind","handleClick","syncConditionalRevealWithInputState","$target","classList","contains","inputIsChecked","checked","toString","toggle","unCheckAllInputsExcept","$component","allInputsWithSameName","name","$inputWithSameName","hasSameFormOwner","form","unCheckExclusiveInputs","allInputsWithSameNameAndExclusiveBehaviour","$exclusiveInput","event","$clickedInput","target","HTMLInputElement","type","hasAriaControls","hasBehaviourExclusive"],"sources":["C:/Users/thami/Documents/21W- Local Software Dev Group Project/medicalRecordsV2/node_modules/govuk-frontend/govuk-esm/components/checkboxes/checkboxes.mjs"],"sourcesContent":["import { nodeListForEach } from '../../common/index.mjs';\nimport '../../vendor/polyfills/Element/prototype/classList.mjs';\nimport '../../vendor/polyfills/Event.mjs';\nimport '../../vendor/polyfills/Function/prototype/bind.mjs';\n\n/* eslint-disable es-x/no-function-prototype-bind -- Polyfill imported */\n\n/**\n * Checkboxes component\n *\n * @class\n * @param {Element} $module - HTML element to use for checkboxes\n */\nfunction Checkboxes ($module) {\n  if (!($module instanceof HTMLElement)) {\n    return this\n  }\n\n  var $inputs = $module.querySelectorAll('input[type=\"checkbox\"]');\n  if (!$inputs.length) {\n    return this\n  }\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$module = $module;\n\n  /** @deprecated Will be made private in v5.0 */\n  this.$inputs = $inputs;\n}\n\n/**\n * Initialise component\n *\n * Checkboxes can be associated with a 'conditionally revealed' content block –\n * for example, a checkbox for 'Phone' could reveal an additional form field for\n * the user to enter their phone number.\n *\n * These associations are made using a `data-aria-controls` attribute, which is\n * promoted to an aria-controls attribute during initialisation.\n *\n * We also need to restore the state of any conditional reveals on the page (for\n * example if the user has navigated back), and set up event handlers to keep\n * the reveal in sync with the checkbox state.\n */\nCheckboxes.prototype.init = function () {\n  // Check that required elements are present\n  if (!this.$module || !this.$inputs) {\n    return\n  }\n\n  var $module = this.$module;\n  var $inputs = this.$inputs;\n\n  nodeListForEach($inputs, function ($input) {\n    var targetId = $input.getAttribute('data-aria-controls');\n\n    // Skip checkboxes without data-aria-controls attributes, or where the\n    // target element does not exist.\n    if (!targetId || !document.getElementById(targetId)) {\n      return\n    }\n\n    // Promote the data-aria-controls attribute to a aria-controls attribute\n    // so that the relationship is exposed in the AOM\n    $input.setAttribute('aria-controls', targetId);\n    $input.removeAttribute('data-aria-controls');\n  });\n\n  // When the page is restored after navigating 'back' in some browsers the\n  // state of form controls is not restored until *after* the DOMContentLoaded\n  // event is fired, so we need to sync after the pageshow event in browsers\n  // that support it.\n  window.addEventListener(\n    'onpageshow' in window ? 'pageshow' : 'DOMContentLoaded',\n    this.syncAllConditionalReveals.bind(this)\n  );\n\n  // Although we've set up handlers to sync state on the pageshow or\n  // DOMContentLoaded event, init could be called after those events have fired,\n  // for example if they are added to the page dynamically, so sync now too.\n  this.syncAllConditionalReveals();\n\n  // Handle events\n  $module.addEventListener('click', this.handleClick.bind(this));\n};\n\n/**\n * Sync the conditional reveal states for all checkboxes in this $module.\n *\n * @deprecated Will be made private in v5.0\n */\nCheckboxes.prototype.syncAllConditionalReveals = function () {\n  nodeListForEach(this.$inputs, this.syncConditionalRevealWithInputState.bind(this));\n};\n\n/**\n * Sync conditional reveal with the input state\n *\n * Synchronise the visibility of the conditional reveal, and its accessible\n * state, with the input's checked state.\n *\n * @deprecated Will be made private in v5.0\n * @param {HTMLInputElement} $input - Checkbox input\n */\nCheckboxes.prototype.syncConditionalRevealWithInputState = function ($input) {\n  var targetId = $input.getAttribute('aria-controls');\n  if (!targetId) {\n    return\n  }\n\n  var $target = document.getElementById(targetId);\n  if ($target && $target.classList.contains('govuk-checkboxes__conditional')) {\n    var inputIsChecked = $input.checked;\n\n    $input.setAttribute('aria-expanded', inputIsChecked.toString());\n    $target.classList.toggle('govuk-checkboxes__conditional--hidden', !inputIsChecked);\n  }\n};\n\n/**\n * Uncheck other checkboxes\n *\n * Find any other checkbox inputs with the same name value, and uncheck them.\n * This is useful for when a “None of these\" checkbox is checked.\n *\n * @deprecated Will be made private in v5.0\n * @param {HTMLInputElement} $input - Checkbox input\n */\nCheckboxes.prototype.unCheckAllInputsExcept = function ($input) {\n  var $component = this;\n\n  /** @type {NodeListOf<HTMLInputElement>} */\n  // @ts-expect-error `NodeListOf<HTMLInputElement>` type expected\n  var allInputsWithSameName = document.querySelectorAll(\n    'input[type=\"checkbox\"][name=\"' + $input.name + '\"]'\n  );\n\n  nodeListForEach(allInputsWithSameName, function ($inputWithSameName) {\n    var hasSameFormOwner = ($input.form === $inputWithSameName.form);\n    if (hasSameFormOwner && $inputWithSameName !== $input) {\n      $inputWithSameName.checked = false;\n      $component.syncConditionalRevealWithInputState($inputWithSameName);\n    }\n  });\n};\n\n/**\n * Uncheck exclusive checkboxes\n *\n * Find any checkbox inputs with the same name value and the 'exclusive' behaviour,\n * and uncheck them. This helps prevent someone checking both a regular checkbox and a\n * \"None of these\" checkbox in the same fieldset.\n *\n * @deprecated Will be made private in v5.0\n * @param {HTMLInputElement} $input - Checkbox input\n */\nCheckboxes.prototype.unCheckExclusiveInputs = function ($input) {\n  var $component = this;\n\n  /** @type {NodeListOf<HTMLInputElement>} */\n  // @ts-expect-error `NodeListOf<HTMLInputElement>` type expected\n  var allInputsWithSameNameAndExclusiveBehaviour = document.querySelectorAll(\n    'input[data-behaviour=\"exclusive\"][type=\"checkbox\"][name=\"' + $input.name + '\"]'\n  );\n\n  nodeListForEach(allInputsWithSameNameAndExclusiveBehaviour, function ($exclusiveInput) {\n    var hasSameFormOwner = ($input.form === $exclusiveInput.form);\n    if (hasSameFormOwner) {\n      $exclusiveInput.checked = false;\n      $component.syncConditionalRevealWithInputState($exclusiveInput);\n    }\n  });\n};\n\n/**\n * Click event handler\n *\n * Handle a click within the $module – if the click occurred on a checkbox, sync\n * the state of any associated conditional reveal with the checkbox state.\n *\n * @deprecated Will be made private in v5.0\n * @param {MouseEvent} event - Click event\n */\nCheckboxes.prototype.handleClick = function (event) {\n  var $clickedInput = event.target;\n\n  // Ignore clicks on things that aren't checkbox inputs\n  if (!($clickedInput instanceof HTMLInputElement) || $clickedInput.type !== 'checkbox') {\n    return\n  }\n\n  // If the checkbox conditionally-reveals some content, sync the state\n  var hasAriaControls = $clickedInput.getAttribute('aria-controls');\n  if (hasAriaControls) {\n    this.syncConditionalRevealWithInputState($clickedInput);\n  }\n\n  // No further behaviour needed for unchecking\n  if (!$clickedInput.checked) {\n    return\n  }\n\n  // Handle 'exclusive' checkbox behaviour (ie \"None of these\")\n  var hasBehaviourExclusive = ($clickedInput.getAttribute('data-behaviour') === 'exclusive');\n  if (hasBehaviourExclusive) {\n    this.unCheckAllInputsExcept($clickedInput);\n  } else {\n    this.unCheckExclusiveInputs($clickedInput);\n  }\n};\n\nexport default Checkboxes;\n//# sourceMappingURL=components/checkboxes/checkboxes.mjs.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}